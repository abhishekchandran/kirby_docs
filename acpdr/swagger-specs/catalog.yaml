openapi: 3.0.0
info:
  version: 1.0.0
  title: Catalog Service RESTful API Resource.
  description: >-
    Catalog service API for client registration. Administrative use only.

    Notes:

    * When trying out the APIs, get your tokens from IMS stage and prefix it with 'Bearer'.

    * All requests with a payload in the request body (i.e., POST, PUT, and PATCH calls) must include the header 'Content-Type: application/json'.  This UI automatically supplies that header when using the 'Try it out' button, but calling clients must take care to supply it for themselves.

    * Your browser will block the requests if you use 'Try it out' button, since it's a cross-origin request. You will need to modify your browsers settings or install, an extension that adds 'Allow-Control-Allow-Origin: *' to your request header. Please note this may compromise the security of your browser, and it is recommended that you turn off this setting once you've used swagger.

    * General API guidelines and conventions (such as expansions, filtering, limits, sorts and field selection) are documented on the Catalog Service Wiki (https://wiki.corp.adobe.com/display/DMSArchitecture/Catalog+Service).
  contact:
    name: Catalog Team.
paths:
  /accounts:
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/accept-encoding"
    get:
      security:
        - Bearer:
            []
      operationId: get_accounts
      summary: Fetches a list of Accounts.
      parameters:
        - name: connector
          description: The ID for the Connector this Account params was created from.
          required: false
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/description"
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/created"
        - $ref: "#/components/parameters/updated"
        - $ref: "#/components/parameters/createdClient"
        - $ref: "#/components/parameters/createdUser"
        - $ref: "#/components/parameters/updatedUser"
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
      responses:
        "200":
          description: account response.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/accountResponse"
              examples:
                response:
                  value:
                    597650bf4b358a650c6127bb:
                      connector: salesforce
                      version: 1.0.0
                      created: 1500926143359
                      updated: 1500926143359
                      createdClient: MCDPCatalogServiceStage
                      createdUser: MCDPCatalogServiceStage@AdobeID
                      updatedUser: MCDPCatalogServiceStage@AdobeID
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      params:
                        username: foo
                        password:
                          value: XXXXXXX
                          isSecret: true
                        securityToken:
                          value: XXXXXXX
                          isSecret: true
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    post:
      security:
        - Bearer:
            []
      summary: Saves a new account.
      operationId: post_account
      requestBody:
        $ref: "#/components/requestBodies/accountRequest"
      responses:
        "201":
          description: Array[ @/accounts/accountId ]
          headers:
            Location:
              description: The URI of the newly created resource
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/accounts/{id}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/accept-encoding"
    get:
      security:
        - Bearer:
            []
      operationId: get_account_by_id
      summary: Fetches Accounts by ID.
      responses:
        "200":
          description: account response.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/accountResponse"
              examples:
                response:
                  value:
                    597650bf4b358a650c6127bb:
                      connector: salesforce
                      version: 1.0.0
                      created: 1500926143359
                      updated: 1500926143359
                      createdClient: MCDPCatalogServiceStage
                      createdUser: MCDPCatalogServiceStage@AdobeID
                      updatedUser: MCDPCatalogServiceStage@AdobeID
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      params:
                        username: foo
                        password:
                          value: XXXXXXX
                          isSecret: true
                        securityToken:
                          value: XXXXXXX
                          isSecret: true
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    post:
      security:
        - Bearer:
            []
      summary: Saves a new Account with a specified ID.
      operationId: post_account_by_id
      requestBody:
        $ref: "#/components/requestBodies/accountRequest"
      responses:
        "201":
          description: Array[ @/accounts/accountId ]
          headers:
            Location:
              description: The URI of the newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    put:
      security:
        - Bearer:
            []
      summary: Updates an existing Account by ID.
      operationId: update_account_by_id
      parameters:
        - $ref: "#/components/parameters/if-match"
        - $ref: "#/components/parameters/if-none-match"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/accountRequest"
        description: Account field(s) to be updated.
        required: true
      responses:
        "200":
          description: Array[ @/accounts/accountId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    patch:
      security:
        - Bearer:
            []
      summary: Updates specified attributes of an existing Account.
      operationId: patch_account_by_id
      parameters:
        - $ref: "#/components/parameters/if-match"
        - $ref: "#/components/parameters/if-none-match"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/accountPatchRequest"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/accountPatchRequest"
        description: Account field(s) to be updated.
        required: true
      responses:
        "200":
          description: Array[ @/accounts/accountId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    delete:
      security:
        - Bearer:
            []
      summary: Deletes an Account by ID.
      operationId: delete_account_by_id
      responses:
        "200":
          description: Array[ @/accounts/accountId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  /batches:
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
    get:
      security:
        - Bearer:
            []
      operationId: get_batch
      summary: Fetches a list of Batches.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/createdAfter"
        - $ref: "#/components/parameters/createdBefore"
        - $ref: "#/components/parameters/created"
        - $ref: "#/components/parameters/createdClient"
        - $ref: "#/components/parameters/updated"
        - $ref: "#/components/parameters/createdUser"
        - $ref: "#/components/parameters/updatedUser"
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/tags"
        - name: status
          description: Filter by the current (mutable) status of this Batch.
          required: false
          in: query
          schema:
            type: string
        - name: recordCount
          description: Filter by the total number of data records (rows/documents)
            processed in this Batch.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: failedRecordCount
          description: Filter by the number of records that could not be processed in this
            Batch.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: size
          description: Number of bytes processed in this Batch.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: started
          description: Filter by the Unix timestamp (in milliseconds) when the Batch
            processing action was started.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: completed
          description: Filter by the Unix timestamp (in milliseconds) when the Batch
            processing action was completed. Completed - Started should yield
            the total processing time.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: startAfter
          description: Query only batches with availability dates that start after the
            specified timestamp.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: startBefore
          description: Query only batches with availability dates that start before the
            specified timestamp.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: endAfter
          description: Query only batches with availability dates that end after the
            specified timestamp.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: endBefore
          description: Query only batches with availability dates that end before the
            specified timestamp.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: batch
          description: "Used to filter on the related object: &batch=batchId."
          required: false
          in: query
          schema:
            type: string
        - name: externalId
          description: "Used to filter on the related object: &externalId=externalId."
          required: false
          in: query
          schema:
            type: string
        - name: connection
          description: "Used to filter on the related object: &connection=connectionId."
          required: false
          in: query
          schema:
            type: string
        - name: connector
          description: "Used to filter on the related object: &connector=connectorId."
          required: false
          in: query
          schema:
            type: string
        - name: dataSet
          description: "Used to filter on the related object: &dataSet=dataSetId."
          required: false
          in: query
          schema:
            type: string
        - name: dataSetFile
          description: "Used to filter on the related object: &dataSetFile=dataSetFileId."
          required: false
          in: query
          schema:
            type: string
        - name: dataSetView
          description: "Used to filter on the related object: &dataSetView=dataSetViewId."
          required: false
          in: query
          schema:
            type: string
        - name: transform
          description: "Used to filter on the related object: &transform=transformId."
          required: false
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
      responses:
        "200":
          description: batch response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/batchResponse"
              examples:
                response:
                  value:
                    5911f88ae2f4bf657c5a8cb5:
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      created: 1494349962314
                      createdClient: MCDPCatalogServiceStage
                      createdUser: MCDPCatalogServiceStage@AdobeID
                      updatedUser: MCDPCatalogServiceStage@AdobeID
                      updated: 1494349963467
                      externalId: /adobe/bulkingest/5af9ee67e4045c1b4945c209
                      status: success
                      errors:
                        - code: err-1494349963436
                      version: 1.0.3
                      availableDates:
                        startDate: 1337
                        endDate: 4000
                      relatedObjects:
                        - type: batch
                          id: foo_batch
                        - type: connection
                          id: foo_connection
                        - type: connector
                          id: foo_connector
                        - type: dataSet
                          id: foo_dataSet
                        - type: dataSetView
                          id: foo_dataSetView
                        - type: dataSetFile
                          id: foo_dataSetFile
                        - type: expressionBlock
                          id: foo_expressionBlock
                        - type: service
                          id: foo_service
                        - type: serviceDefinition
                          id: foo_serviceDefinition
                      metrics:
                        foo: 1337
                      tags:
                        foo_bar:
                          - stuff
                        bar_foo:
                          - woo
                          - baz
                        foo/bar/foo-bar:
                          - weehaw
                          - wee:haw
                      inputFormat:
                        format: parquet
                        delimiter: .
                        quote: "`"
                        escape: \
                        nullMarker: ""
                        header: "true"
                        charset: UTF-8
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    post:
      security:
        - Bearer:
            []
      summary: Saves a new Batch.
      operationId: post_batch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/batchRequest"
        description: Batch to be posted.
        required: true
      responses:
        "201":
          description: Array[ @/batches/batchId ]
          headers:
            Location:
              description: The URI of the newly created resource
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/batches/uniques/{field}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - name: field
        description: Field to get unique values for
        required: true
        in: path
        schema:
          type: string
    get:
      security:
        - Bearer:
            []
      operationId: get_unique_batch_values
      summary: Fetches the unique values stored in the requested field, standard
        filtering applies before gathering the uniques. Supported fields are
        [id]
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/createdAfter"
        - $ref: "#/components/parameters/createdBefore"
        - $ref: "#/components/parameters/created"
        - $ref: "#/components/parameters/createdClient"
        - $ref: "#/components/parameters/updated"
        - $ref: "#/components/parameters/createdUser"
        - $ref: "#/components/parameters/updatedUser"
        - $ref: "#/components/parameters/version"
        - name: status
          description: Filter by the current (mutable) status of this Batch.
          required: false
          in: query
          schema:
            type: string
        - name: recordCount
          description: Filter by the total number of data records (rows/documents)
            processed in this Batch.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: failedRecordCount
          description: Filter by the number of records that could not be processed in this
            Batch.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: size
          description: Number of bytes processed in this Batch.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: started
          description: Filter by the Unix timestamp (in milliseconds) when the Batch
            processing action was started.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: completed
          description: Filter by the Unix timestamp (in milliseconds) when the Batch
            processing action was completed. Completed - Started should yield
            the total processing time.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: startAfter
          description: Query only batches with availability dates that start after the
            specified timestamp.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: startBefore
          description: Query only batches with availability dates that start before the
            specified timestamp.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: endAfter
          description: Query only batches with availability dates that end after the
            specified timestamp.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: endBefore
          description: Query only batches with availability dates that end before the
            specified timestamp.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: batch
          description: "Used to filter on the related object: &batch=batchId."
          required: false
          in: query
          schema:
            type: string
        - name: externalId
          description: "Used to filter on the related object: &externalId=externalId."
          required: false
          in: query
          schema:
            type: string
        - name: connection
          description: "Used to filter on the related object: &connection=connectionId."
          required: false
          in: query
          schema:
            type: string
        - name: connector
          description: "Used to filter on the related object: &connector=connectorId."
          required: false
          in: query
          schema:
            type: string
        - name: dataSet
          description: "Used to filter on the related object: &dataSet=dataSetId."
          required: false
          in: query
          schema:
            type: string
        - name: dataSetFile
          description: "Used to filter on the related object: &dataSetFile=dataSetFileId."
          required: false
          in: query
          schema:
            type: string
        - name: dataSetView
          description: "Used to filter on the related object: &dataSetView=dataSetViewId."
          required: false
          in: query
          schema:
            type: string
        - name: transform
          description: "Used to filter on the related object: &transform=transformId."
          required: false
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
      responses:
        "200":
          description: batch response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                response:
                  value:
                    - 5911f88ae2f4bf657c5a8cb5
                    - 5911f88ae2f4bf657c5a8cb4
                    - 5911f88ae2f4bf657c5a8cb3
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/batches/{id}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      operationId: get_batch_by_id
      description: Fetches Batches by ID.
      parameters:
        - name: aggregate
          description: If true, then return the aggregated status, metrics, and errors in
            the root level status, metrics, and errors (default is false).
          required: false
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: Batch object for given batchId.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/batchResponse"
              examples:
                response:
                  value:
                    5911f88ae2f4bf657c5a8cb5:
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      created: 1494349962314
                      createdClient: MCDPCatalogServiceStage
                      createdUser: MCDPCatalogServiceStage@AdobeID
                      updatedUser: MCDPCatalogServiceStage@AdobeID
                      updated: 1494349963467
                      externalId: /adobe/bulkingest/5af9ee67e4045c1b4945c209
                      status: success
                      errors:
                        - code: err-1494349963436
                      version: 1.0.3
                      availableDates:
                        startDate: 1337
                        endDate: 4000
                      relatedObjects:
                        - type: batch
                          id: foo_batch
                        - type: connection
                          id: foo_connection
                        - type: connector
                          id: foo_connector
                        - type: dataSet
                          id: foo_dataSet
                        - type: dataSetView
                          id: foo_dataSetView
                        - type: dataSetFile
                          id: foo_dataSetFile
                        - type: expressionBlock
                          id: foo_expressionBlock
                        - type: service
                          id: foo_service
                        - type: serviceDefinition
                          id: foo_serviceDefinition
                      metrics:
                        foo: 1337
                      tags:
                        foo_bar:
                          - stuff
                        bar_foo:
                          - woo
                          - baz
                        foo/bar/foo-bar:
                          - weehaw
                          - wee:haw
                      inputFormat:
                        format: parquet
                        delimiter: .
                        quote: "`"
                        escape: \
                        nullMarker: ""
                        header: "true"
                        charset: UTF-8
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    post:
      security:
        - Bearer:
            []
      summary: Creates a new Batch with a specified Id.
      operationId: post_batch_by_id
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/batchRequest"
        description: Batch to be created.
        required: true
      responses:
        "201":
          description: Array[ @/batches/batchId ]
          headers:
            Location:
              description: The URI of the newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    put:
      security:
        - Bearer:
            []
      summary: Updates an existing Batch by ID.
      operationId: update_batch_by_id
      parameters:
        - $ref: "#/components/parameters/if-match"
        - $ref: "#/components/parameters/if-none-match"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/batchRequest"
        description: Data set field(s) to be updated.
        required: true
      responses:
        "200":
          description: Array[ @/batches/batchId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    patch:
      security:
        - Bearer:
            []
      summary: Updates specified attributes of an existing Batch.
      operationId: patch_batch_by_id
      parameters:
        - $ref: "#/components/parameters/if-match"
        - $ref: "#/components/parameters/if-none-match"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/batchPatchRequest"
        description: Data set field(s) to be updated.
        required: true
      responses:
        "200":
          description: Array[ @/batches/batchId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    delete:
      security:
        - Bearer:
            []
      summary: Deletes a Batch by ID.
      operationId: delete_batch_by_id
      responses:
        "200":
          description: Array[ @/batches/batchId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  /health:
    get:
      summary: Catalog healthcheck report. Used by monitoring services and dashboards.
        On local the URI is /catalog/health.
      operationId: get_catalog_healthcheck
      parameters:
        - name: x-api-key
          description: API key for request.
          required: true
          in: header
          schema:
            type: string
      responses:
        "200":
          description: healthcheck response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/healthcheck"
        "503":
          description: service unavailable
        default:
          description: Unexpected error
  /health-detailed:
    get:
      security:
        - Bearer:
            []
      summary: Catalog healthcheck report with dependencies. Used by monitoring
        services and dashboards.On local the URI should be
        /catalog/health-detailed.
      operationId: get_catalog_detailed_healthcheck
      parameters:
        - name: x-api-key
          description: API key for request.
          required: true
          in: header
          schema:
            type: string
      responses:
        "200":
          description: healthcheck response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/health-detailed"
        "503":
          description: service unavailable
        default:
          description: Unexpected error
  "/largeDocuments/{id}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      operationId: get_largeDocument_by_id
      summary: Fetches Large document by ID.
      responses:
        "200":
          description: Large Document response. The response includes the large document.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/largeDocumentsResponse"
              examples:
                response:
                  value:
                    56a1c00e9f8e2c53284add34:
                      created: 1453441038288
                      ttl: 1453441038288
                      objectType: dataSet
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      jsonString:
                        name: datasets functional tests
                        description: Functional test for data sets
                        connectorId: s3-push
                        tags:
                          foo:
                            - bar
                            - foos
                            - ball
                          adobe/touchpoint/appliedTransformations:
                            - CLUSTERED:FOO
                        status: enabled
                        aspect: production
                        requestStartDate: 1992-10-10 10:10:10
                        basePath: fakeBasePath
                        codeUrl: foo://bar/baz/fuzz.git
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Large Document not found.
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  /connections:
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches a list of Connections.
      operationId: get_connections
      parameters:
        - name: connector
          description: Filter by the ID for the Connector this Connection was created from.
          required: false
          in: query
          schema:
            type: string
        - name: parentConnectionId
          description: Used in cases where global/shared data is managed by this
            connection. The parent connection performs the ETL/Mapping jobs, and
            this child connection represents a customer's membership and
            visibility into the parent. This query param will filter all
            connectors by the parentConnectorId value.
          required: false
          in: query
          schema:
            type: string
        - name: name
          description: Filter by the user-facing name of this Connection.
          required: false
          in: query
          schema:
            type: string
        - name: accountId
          description: Filter by the foreign key to the account where the credentials and
            related fields of the connector and connection combination is
            stored.
          required: false
          in: query
          schema:
            type: string
        - name: description
          description: Filter by the user-provided description of the Connection.
          required: false
          in: query
          schema:
            type: string
        - name: enabled
          description: Indicates the status of the Connection. Should be interpreted as
            disabled or suspended when set to false.
          required: false
          in: query
          schema:
            type: boolean
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/created"
        - $ref: "#/components/parameters/updated"
        - $ref: "#/components/parameters/createdClient"
        - $ref: "#/components/parameters/createdUser"
        - $ref: "#/components/parameters/updatedUser"
        - name: ingestStart
          description: Filter by the suggested date/time to start ingesting.
          required: false
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
      responses:
        "200":
          description: Connections response. The response also includes a reference to
            linked datasets.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/connectionResponse"
              examples:
                response:
                  value:
                    56a1c00e9f8e2c53284add34:
                      connector: dfa
                      name: connection_1
                      enabled: true
                      version: 1.0.0
                      created: 1453441038288
                      updated: 1453441038288
                      createdClient: MCDPCatalogServiceStage
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      dataSets: "@/connections/56a1c00e9f8e2c53284add34/dataSets"
                      statsCache:
                        {}
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    post:
      security:
        - Bearer:
            []
      summary: Saves a new Connection.
      operationId: post_connection
      requestBody:
        $ref: "#/components/requestBodies/connectionRequest"
      responses:
        "201":
          description: Array[ @/connections/connectionId ]
          headers:
            Location:
              description: The URI of the newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/connections/{id}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      operationId: get_connection_by_id
      summary: Fetches Connections by ID.
      responses:
        "200":
          description: Connections response. The response also includes a reference to
            linked datasets.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/connectionResponse"
              examples:
                response:
                  value:
                    56a1c00e9f8e2c53284add34:
                      connector: dfa
                      name: connection_1
                      enabled: true
                      version: 1.0.0
                      created: 1453441038288
                      updated: 1453441038288
                      createdClient: MCDPCatalogServiceStage
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      dataSets: "@/connections/56a1c00e9f8e2c53284add34/dataSets"
                      statsCache:
                        {}
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    post:
      security:
        - Bearer:
            []
      summary: Saves a new Connection with a specified ID.
      operationId: post_connection_by_id
      requestBody:
        $ref: "#/components/requestBodies/connectionRequest"
      responses:
        "201":
          description: Array[ @/connections/connectionId ]
          headers:
            Location:
              description: The URI of the newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    put:
      security:
        - Bearer:
            []
      summary: Updates an existing Connection by ID.
      operationId: update_connection_by_id
      parameters:
        - $ref: "#/components/parameters/if-match"
        - $ref: "#/components/parameters/if-none-match"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/connectionRequest"
        description: Connection field(s) to be updated.
        required: true
      responses:
        "200":
          description: Array[ @/connections/connectionId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    patch:
      security:
        - Bearer:
            []
      summary: Updates specified attributes of an existing Connection.
      operationId: patch_connection_by_id
      parameters:
        - $ref: "#/components/parameters/if-match"
        - $ref: "#/components/parameters/if-none-match"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/connectionPatchRequest"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/connectionPatchRequest"
        description: Connection field(s) to be updated.
        required: true
      responses:
        "200":
          description: Array[ @/connections/connectionId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    delete:
      security:
        - Bearer:
            []
      summary: Deletes a Connection by ID.
      operationId: delete_connection_by_id
      responses:
        "200":
          description: Array[ @/connections/connectionId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/connections/{id}/dataSets":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      operationId: get_data_sets_by_connection_id
      summary: Fetches DataSets for the given Connection.
      parameters:
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
        - $ref: "#/components/parameters/tags"
      responses:
        "200":
          description: Datasets associated with input connectionId.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/dataSetResponse"
              examples:
                response:
                  value:
                    5ab540d0864cf0267448ead4:
                      version: 1.0.0
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      connectorId: s3-push
                      connectionId: 5ab5249e864cf0267448ead1
                      name: connections functional tests - 1521827915638
                      created: 1521828048923
                      updated: 1521828208046
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      updatedUser: acp_foundation_catalog@AdobeID
                      namespace: ACP
                      contacts:
                        - email: someEmailId@something.com
                          displayName: dummyName
                          isPrimary: true
                      state: DRAFT
                      tags:
                        foo:
                          - bar
                          - foos
                          - ball
                        adobe/touchpoint/appliedTransformations:
                          - CLUSTERED:FOO
                      viewId: 5ab54170864cf0267448ead5
                      aspect: production
                      status: enabled
                      fields:
                        []
                      basePath: s3://bar/ball/baz
                      fileDescription:
                        persisted: false
                      transforms: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/transforms"
                      files: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/files"
                      observableSchema:
                        {}
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  /connectors:
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches the list of Connectors.
      operationId: get_connectors
      parameters:
        - $ref: "#/components/parameters/version"
        - name: type
          description: Filter by the ingest type for this Connector.
          required: false
          in: query
          schema:
            type: string
        - name: name
          description: Filter by the name of this Connector.
          required: false
          in: query
          schema:
            type: string
        - name: category
          description: "Connectors currently have 2 categories: 1) standard: we are
            connecting to a known source with known data (ie. other companies
            data stores) or 2) custom: a generaic connector to FTP or S3 etc.
            This query param can be used to filter all connectors by their
            category."
          required: false
          in: query
          schema:
            type: string
        - name: description
          description: Filter by the introductory text describing this connector, it's
            primary functionality, relevant data sets, etc.
          required: false
          in: query
          schema:
            type: string
        - name: maxConnections
          description: Filter by the maximum number of connections a customer (IMS Org) can
            create of this type.
          required: false
          in: query
          schema:
            type: integer
        - name: uiCreationAllowed
          description: When set to false, this connector should not be shown by the UI
            Connector Library. Essentially, the UI is not to create connectors
            of this type, but should show status related to this connector
            elsewhere.
          required: false
          in: query
          schema:
            type: boolean
        - name: connectorOwnedDataSets
          description: Indicates whether or not the Connector 'owns' the datasets created
            by this connector.  If so then there are certain things like GDPR
            that are not controlled by Platform but instead are controlled by
            the originating solution/vendor.  If not present or false then
            platform 'owns' the dataset.
          required: false
          in: query
          schema:
            type: boolean
        - name: internal
          description: Indicates if the connector is internal to Adobe, false indicates
            that the connector is from a third-party
          required: false
          in: query
          schema:
            type: boolean
        - name: ingestStart
          description: Filter by the suggested date/time to start ingesting.
          required: false
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
      responses:
        "200":
          description: List of all connectors for given ims_org_id.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/connectorResponse"
              examples:
                response:
                  value:
                    dynamics-online:
                      name: Microsoft Dynamics 365
                      category: standard
                      version: "0.1"
                      type: batch
                      description: ""
                      documents:
                        []
                      ingestStart: ""
                      frequency:
                        userEditable: minute
                        minute: "30"
                        hour: "2"
                        month: "*"
                        day: "*"
                        dayOfWeek: "*"
                        timezone: ""
                        live: false
                      uiCreationAllowed: true
                      paramsSchema:
                        properties:
                          organizationName:
                            description: The organization name of the Dynamics instance.
                            type: string
                          username:
                            description: The user's identification name associated with the
                              credential.
                            type: string
                          password:
                            description: The Dynamics password.
                            type: string
                          organizationUri:
                            description: The Dynamics urganization URI
                            type: string
                          akvSecretPassword:
                            description: The Azure Key Vault secret identifier of the
                              password for the user name associated with the
                              credential.
                            type: string
                        required:
                          - username
                          - password
                          - organizationUri
                      stats: "@/connectors/dynamics-online/stats"
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/connectors/{id}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches Connectors by ID.
      operationId: get_connector_by_id
      responses:
        "200":
          description: Connector object for input connectorId.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/connectorResponse"
              examples:
                response:
                  value:
                    dynamics-online:
                      name: Microsoft Dynamics 365
                      category: standard
                      version: "0.1"
                      type: batch
                      description: ""
                      documents:
                        []
                      ingestStart: ""
                      frequency:
                        userEditable: minute
                        minute: "30"
                        hour: "2"
                        month: "*"
                        day: "*"
                        dayOfWeek: "*"
                        timezone: ""
                        live: false
                      uiCreationAllowed: true
                      paramsSchema:
                        properties:
                          organizationName:
                            description: The organization name of the Dynamics instance.
                            type: string
                          username:
                            description: The user's identification name associated with the
                              credential.
                            type: string
                          password:
                            description: The Dynamics password.
                            type: string
                          organizationUri:
                            description: The Dynamics urganization URI
                            type: string
                          akvSecretPassword:
                            description: The Azure Key Vault secret identifier of the
                              password for the user name associated with the
                              credential.
                            type: string
                        required:
                          - username
                          - password
                          - organizationUri
                      stats: "@/connectors/dynamics-online/stats"
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/connectors/{id}/stats":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches statistics for a given Connector.
      operationId: get_stats_by_connector_id
      responses:
        "200":
          description: Returns connection count for given connector id.
          content:
            application/json:
              schema:
                type: object
                properties:
                  connectorId:
                    type: integer
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  /dataSets:
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches a list of DataSets.
      operationId: get_data_sets
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/created"
        - $ref: "#/components/parameters/updated"
        - $ref: "#/components/parameters/createdClient"
        - $ref: "#/components/parameters/createdUser"
        - $ref: "#/components/parameters/updatedUser"
        - name: connectorId
          description: Filter by the foreign key to the Connector this DataSet originates
            from. Template DataSets are tied to Connectors and not Connections.
          required: false
          in: query
          schema:
            type: string
        - name: connectionId
          description: Filter by the foreign key to the Connection this DataSet originates
            from.
          required: false
          in: query
          schema:
            type: string
        - name: name
          description: Filter by the a descriptive, human-readable name for this DataSet.
          required: false
          in: query
          schema:
            type: string
        - name: description
          description: Filter by the longer text description of the DataSet.
          required: false
          in: query
          schema:
            type: string
        - name: type
          description: DataSet types reflect where the data is in the MCDP lifecycle. Raw
            datasets are created by ingest, Master datasets are created by the
            Harvester, and Model datasets are configured by users. App datasets
            can then be created by MCDP services. This query param allows
            filtering of datasets by their type.
          required: false
          in: query
          schema:
            type: string
        - name: state
          description: The state related to a dataset.
          required: false
          in: query
          schema:
            type: string
        - name: namespace
          description: One of the registered platform acronyms that identify the platform.
          required: false
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
        - $ref: "#/components/parameters/tags"
      responses:
        "200":
          description: All datasets for given imsOrg.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/dataSetResponse"
              examples:
                response:
                  value:
                    5ab540d0864cf0267448ead4:
                      version: 1.0.0
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      connectorId: s3-push
                      connectionId: 5ab5249e864cf0267448ead1
                      name: connections functional tests - 1521827915638
                      created: 1521828048923
                      updated: 1521828208046
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      editableClientIds:
                        - acp_foundation_catalog
                      updatedUser: acp_foundation_catalog@AdobeID
                      namespace: ACP
                      contacts:
                        - email: someEmailId@something.com
                          displayName: dummyName
                          isPrimary: true
                      state: DRAFT
                      tags:
                        foo:
                          - bar
                          - foos
                          - ball
                        adobe/touchpoint/appliedTransformations:
                          - CLUSTERED:FOO
                      viewId: 5ab54170864cf0267448ead5
                      aspect: production
                      status: enabled
                      fields:
                        []
                      basePath: s3://bar/ball/baz
                      fileDescription:
                        persisted: false
                      transforms: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/transforms"
                      files: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/files"
                      observableSchema:
                        {}
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    post:
      security:
        - Bearer:
            []
      summary: Saves a new DataSet.
      operationId: post_data_set
      parameters:
        - name: requestDataSource
          description: Set to true if you want Catalog to create a dataSource on your
            behalf; otherwise, pass a dataSourceId in the body.
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dataSetRequest"
        description: Data set to be posted
        required: true
      responses:
        "201":
          description: Array[ @/dataSets/dataSetId ]
          headers:
            Location:
              description: The URI of the newly created resource
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/dataSets/{id}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches DataSets by ID.
      operationId: get_data_set_by_id
      parameters:
        - name: properties
          description: A comma separated whitelist of top-level object properties to be
            returned in the response. Used to cut down the number of properties
            and amount of data returned in the response bodies.
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: DataSet object for input DataSetId.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/dataSetResponse"
              examples:
                response:
                  value:
                    5ab540d0864cf0267448ead4:
                      version: 1.0.0
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      connectorId: s3-push
                      connectionId: 5ab5249e864cf0267448ead1
                      name: connections functional tests - 1521827915638
                      created: 1521828048923
                      updated: 1521828208046
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      editableClientIds:
                        - acp_foundation_catalog
                      updatedUser: acp_foundation_catalog@AdobeID
                      namespace: ACP
                      contacts:
                        - email: someEmailId@something.com
                          displayName: dummyName
                          isPrimary: true
                      state: DRAFT
                      tags:
                        foo:
                          - bar
                          - foos
                          - ball
                        adobe/touchpoint/appliedTransformations:
                          - CLUSTERED:FOO
                      viewId: 5ab54170864cf0267448ead5
                      aspect: production
                      status: enabled
                      fields:
                        []
                      basePath: s3://bar/ball/baz
                      fileDescription:
                        persisted: false
                      transforms: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/transforms"
                      files: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/files"
                      observableSchema:
                        {}
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    put:
      security:
        - Bearer:
            []
      summary: Updates an existing DataSet by ID.
      operationId: update_data_set_by_id
      parameters:
        - $ref: "#/components/parameters/if-match"
        - $ref: "#/components/parameters/if-none-match"
        - name: requestDataSource
          description: Set to true if you want Catalog to create a dataSource on your
            behalf; otherwise, pass a dataSourceId in the body.
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dataSetRequest"
        description: Data set field(s) to be updated.
        required: true
      responses:
        "200":
          description: Array[ @/dataSets/dataSetId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    patch:
      security:
        - Bearer:
            []
      summary: Updates specified attributes of an existing DataSet.
      operationId: patch_data_set_by_id
      parameters:
        - $ref: "#/components/parameters/if-match"
        - $ref: "#/components/parameters/if-none-match"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dataSetRequest"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/dataSetRequest"
        description: Data set field(s) to be updated.
        required: true
      responses:
        "200":
          description: Array[ @/dataSets/dataSetId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    delete:
      security:
        - Bearer:
            []
      summary: Deletes a DataSet by ID.
      operationId: delete_data_set_by_id
      responses:
        "200":
          description: Array[ @/dataSets/dataSetId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/dataSets/{id}/credentials":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/x-user-token"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches credentials for the given dataSet.
      operationId: get_credentials_by_data_set_id
      parameters:
        - name: batchId
          description: If wishing to write, the batchId used during writing. Required for
            buliding a stage path.
          required: false
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Creadential object given dataSet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dataSetCredentials"
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/dataSets/{id}/views":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Lists DataSetViews for this DataSet.
      operationId: get_data_set_views_by_data_set_id
      parameters:
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
      responses:
        "200":
          description: List of dataSetView objects associated with given dataSetId.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/dataSetViewResponse"
              examples:
                response:
                  value:
                    5ab54170864cf0267448ead5:
                      version: 1.0.0
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      dataSetId: 5ab540d0864cf0267448ead4
                      aspect: production
                      status: enabled
                      editable: false
                      fields:
                        []
                      storageType: s3
                      basePath: s3://bar/ball/baz
                      fileDescription:
                        persisted: false
                      created: 1521828208046
                      updated: 1521828208046
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      updatedUser: acp_foundation_catalog@AdobeID
                      observableSchema:
                        {}
                      transforms: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/transforms"
                      files: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/files"
                      isLookup: false
                      tags:
                        foo:
                          - bar
                          - foos
                          - ball
                        adobe/touchpoint/appliedTransformations:
                          - CLUSTERED:FOO
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    post:
      security:
        - Bearer:
            []
      summary: Creates a new DataSetView for this dataSet.
      operationId: post_data_set_view_by_data_set_id
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dataSetViewRequest"
        description: Datasetview to be posted
        required: true
      responses:
        "201":
          description: Array[ @/dataSets/dataSetId/views/viewId ]
          headers:
            Location:
              description: The URI of the newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/dataSets/{id}/views/{viewid}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches a particular DataSetView for this DataSet.
      operationId: get_data_set_view_by_data_set_id_by_id
      parameters:
        - name: viewid
          description: datasetview id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: DataSetView associated with input dataSetId.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/dataSetViewResponse"
              examples:
                response:
                  value:
                    5ab54170864cf0267448ead5:
                      version: 1.0.0
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      dataSetId: 5ab540d0864cf0267448ead4
                      aspect: production
                      status: enabled
                      editable: false
                      fields:
                        []
                      storageType: s3
                      basePath: s3://bar/ball/baz
                      fileDescription:
                        persisted: false
                      created: 1521828208046
                      updated: 1521828208046
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      updatedUser: acp_foundation_catalog@AdobeID
                      observableSchema:
                        {}
                      transforms: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/transforms"
                      files: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/files"
                      isLookup: false
                      tags:
                        foo:
                          - bar
                          - foos
                          - ball
                        adobe/touchpoint/appliedTransformations:
                          - CLUSTERED:FOO
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/dataSets/{id}/views/{viewId}/transforms":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Lists the Transforms for a particular dataSetView for this dataSet.
      operationId: get_transforms_by_data_set_id_and_data_set_view_id
      parameters:
        - name: viewId
          description: dataSetView ID.
          required: true
          in: path
          schema:
            type: string
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
      responses:
        "200":
          description: List of transforms associated with given dataSetViewId and dataSetId.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/transformResponse"
              examples:
                response:
                  value:
                    5abac7063998860540c7b848:
                      version: 1.0.5
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      created: 1522190086195
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      updatedUser: acp_foundation_catalog@AdobeID
                      updated: 1522190612384
                      codeUrl: git://example.com/foo/bar/something.git
                      args:
                        - --context_param
                          profile_dsv_in0.inputPath=${CATALOG.DSV.5ab540d0864cf0267448ead4.inputFiles}
                      inputs:
                        []
                      outputs:
                        - dataSet: "@/dataSets/123456"
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/dataSets/{id}/views/{viewId}/files":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Lists the dataSetFiles for a particular dataSetView for this dataSet.
      operationId: get_data_set_files_by_data_set_id_and_data_set_view_id
      parameters:
        - name: viewId
          description: dataSetViewId
          required: true
          in: path
          schema:
            type: string
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
      responses:
        "200":
          description: List of dataSetFiles for given dataSetViewId and dataSetId.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/dataSetFileResponse"
              examples:
                response:
                  value:
                    5abd49645591445e1ba04f87:
                      version: 1.0.0
                      created: 1522354532905
                      updated: 1522354532905
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      dataSetViewId: 5ab54170864cf0267448ead5
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      updatedUser: acp_foundation_catalog@AdobeID
                      availableDates:
                        startDate: 4444
                        endDate: 5555
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    post:
      security:
        - Bearer:
            []
      summary: Adds DataSetFile to a particular DataSetView for this DataSet.
      operationId: post_data_set_file_by_data_set_id_and_data_set_view_id
      parameters:
        - name: viewId
          description: dataSetView ID
          required: true
          in: path
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/dataSetFileRequest"
      responses:
        "201":
          description: Array[ @/dataSets/{datasetId}/views/{viewId}/files/{fileId} ]
          headers:
            Location:
              description: The URI of the newly created resource
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/dataSets/{id}/views/{viewId}/files/{fileId}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches a dataSetFile for a particular dataSetView for this dataSet.
      operationId: get_data_set_file_by_data_set_id_and_data_set_view_id_by_id
      parameters:
        - name: viewId
          description: dataSetView ID
          required: true
          in: path
          schema:
            type: string
        - name: fileId
          description: file ID
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: DataSetFile for given fileId, dataSetViewId and dataSetId.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/dataSetFileResponse"
              examples:
                response:
                  value:
                    5abd49645591445e1ba04f87:
                      version: 1.0.0
                      created: 1522354532905
                      updated: 1522354532905
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      dataSetViewId: 5ab54170864cf0267448ead5
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      updatedUser: acp_foundation_catalog@AdobeID
                      availableDates:
                        startDate: 4444
                        endDate: 5555
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    delete:
      security:
        - Bearer:
            []
      summary: Removes a DataSetFile for a particular DataSetView for this DataSet.
      operationId: delete_data_set_file_by_data_set_id_and_data_set_view_id_by_id
      parameters:
        - name: viewId
          description: dataSetView ID
          required: true
          in: path
          schema:
            type: string
        - name: fileId
          description: dataSetView ID
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Array[ @/{datasetId?/views/{viewId}/files/{fileId} ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/dataSets/{id}/ingestBatchSummary":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: "Retrieves summarized stats for a DataSet's batches. Default time
        window: last seven days."
      operationId: get_data_set_batches_summary
      parameters:
        - $ref: "#/components/parameters/createdBefore"
        - $ref: "#/components/parameters/createdAfter"
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
        - $ref: "#/components/parameters/tags"
      responses:
        "200":
          description: Batch summary object for given dataSetId.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/batchResponse"
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/dataSets/{id}/dule":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Returns the DULE labels associated with a dataset.
      operationId: get_dule_labels
      responses:
        "200":
          description: The DULE labels assocated with the dataset.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/duleLabelResponse"
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  /dataSetViews:
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches a list of DataSetViews.
      operationId: get_data_set_views
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/created"
        - $ref: "#/components/parameters/updated"
        - $ref: "#/components/parameters/createdClient"
        - $ref: "#/components/parameters/createdUser"
        - $ref: "#/components/parameters/updatedUser"
        - name: dataSetId
          description: Filter by the foreign key to the owning DataSet.
          required: false
          in: query
          schema:
            type: string
        - name: name
          description: Filter by the name of this DataSetView.
          required: false
          in: query
          schema:
            type: string
        - name: isDefault
          description: Marks this view as the default for it's DataSet. DataSets should
            only be associated to a single default view. This query param allows
            filtering of dataSetViews by their isDefault field value.
          required: false
          in: query
          schema:
            type: boolean
        - name: status
          description: Describes the current state of the view.  If a view is not enabled,
            it should not be used by any process even when it is specified as a
            dependency. Only one view of a given aspect should be enabled at any
            time. For example, no DataSet should have more than one enabled
            production or sandbox view. This query param allows filtering all
            dataSetViews by their status field value.
          required: false
          in: query
          schema:
            type: string
        - name: editable
          description: Determines whether or not this DataSetView definition should be
            editable by the user.  Some documents are 'locked' and not available
            for edit. This query param allows filtering all dataSetViews by
            their status editable value.
          required: false
          in: query
          schema:
            type: boolean
        - name: sdsVersion
          description: Filter by the semantic version of the SDS this view (and it's
            transforms) are compatible with.
          required: false
          in: query
          schema:
            type: string
        - name: basePath
          description: Filter by the fully qualified base path for all DataSetFiles
            associated with this view. For views cached in a database (HBase or
            Cassandra), supply a templatized DSN.
          required: false
          in: query
          schema:
            type: string
        - name: saveStrategy
          description: Filter by the save strategy for this dataset.
          required: false
          in: query
          schema:
            type: string
        - name: isCached
          description: Some DataSetViews are pre-cached in a high-speed lookup table for
            faster access, this flag indicates if that has been done. This query
            param allows filtering all dataSetViews by their isCached field
            value.
          required: false
          in: query
          schema:
            type: boolean
        - name: aspect
          description: Aspect represents the particular perspective or target you're after
            when viewing a dataset. Sandbox views are a version of the dataset
            that's being used to iterate towards a final ETL job definition. The
            production aspect is then used (by default). This query param allows
            filtering all dataSetViews by their aspect field value.
          required: false
          in: query
          schema:
            type: string
        - name: schema
          description: This is the uri for the XDM model.
          required: false
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
      responses:
        "200":
          description: List of all dataSetViews associated with given ims_org_id.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/dataSetViewResponse"
              examples:
                response:
                  value:
                    5ab54170864cf0267448ead5:
                      version: 1.0.0
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      dataSetId: 5ab540d0864cf0267448ead4
                      aspect: production
                      status: enabled
                      editable: false
                      fields:
                        []
                      storageType: s3
                      basePath: s3://bar/ball/baz
                      fileDescription:
                        persisted: false
                      created: 1521828208046
                      updated: 1521828208046
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      updatedUser: acp_foundation_catalog@AdobeID
                      observableSchema:
                        {}
                      transforms: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/transforms"
                      files: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/files"
                      isLookup: false
                      tags:
                        foo:
                          - bar
                          - foos
                          - ball
                        adobe/touchpoint/appliedTransformations:
                          - CLUSTERED:FOO
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    post:
      security:
        - Bearer:
            []
      summary: Saves a new dataSetView.
      operationId: post_data_set_view
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dataSetViewRequest"
        description: DataSetView to be posted.
        required: true
      responses:
        "201":
          description: Array[ @/dataSetViews/dataSetViewId ]
          headers:
            Location:
              description: The URI of the newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/dataSetViews/{id}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches DataSetViews by ID.
      operationId: get_data_set_view_by_id
      parameters:
        - name: properties
          description: A comma separated whitelist of top-level object properties to be
            returned in the response. Used to cut down the number of properties
            and amount of data returned in the response bodies.
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: DataSetView for given dataSetViewId.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/dataSetViewResponse"
              examples:
                response:
                  value:
                    5ab54170864cf0267448ead5:
                      version: 1.0.0
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      dataSetId: 5ab540d0864cf0267448ead4
                      aspect: production
                      status: enabled
                      editable: false
                      fields:
                        []
                      storageType: s3
                      basePath: s3://bar/ball/baz
                      fileDescription:
                        persisted: false
                      created: 1521828208046
                      updated: 1521828208046
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      updatedUser: acp_foundation_catalog@AdobeID
                      observableSchema:
                        {}
                      transforms: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/transforms"
                      files: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/files"
                      isLookup: false
                      tags:
                        foo:
                          - bar
                          - foos
                          - ball
                        adobe/touchpoint/appliedTransformations:
                          - CLUSTERED:FOO
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    put:
      security:
        - Bearer:
            []
      summary: Updates an existing DataSetView by ID.
      operationId: update_data_set_view_by_id
      parameters:
        - $ref: "#/components/parameters/if-match"
        - $ref: "#/components/parameters/if-none-match"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dataSetViewRequest"
        description: DataSetViews to be updated.
        required: true
      responses:
        "201":
          description: Array[ @/dataSetViews/dataSetViewId ]
          headers:
            Location:
              description: The URI of the newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    patch:
      security:
        - Bearer:
            []
      summary: Updates specified attributes of an existing DataSetView.
      operationId: patch_data_set_view_by_id
      parameters:
        - $ref: "#/components/parameters/if-match"
        - $ref: "#/components/parameters/if-none-match"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dataSetViewPatchRequest"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/dataSetViewPatchRequest"
        description: Data set view field(s) to be updated.
        required: true
      responses:
        "200":
          description: Array[ @/dataSetViews/{dataSetViewId} ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    delete:
      security:
        - Bearer:
            []
      summary: Deletes a DataSetView by ID.
      operationId: delete_data_set_view_by_id
      responses:
        "200":
          description: Array[ @/dataSetViews/dataSetViewId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/dataSetViews/{id}/children":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Lists DataSetViews dependent on the current DataSetView.
      operationId: get_children_by_data_set_view_id
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/created"
        - $ref: "#/components/parameters/updated"
        - $ref: "#/components/parameters/createdClient"
        - $ref: "#/components/parameters/createdUser"
        - $ref: "#/components/parameters/updatedUser"
        - name: dataSetId
          description: Foreign key to the owning DataSet.
          required: false
          in: query
          schema:
            type: string
        - name: name
          description: The name of this DataSetView.
          required: false
          in: query
          schema:
            type: string
        - name: isDefault
          description: Marks this view as the default for it's DataSet. DataSets should
            only be associated to a single default view.
          required: false
          in: query
          schema:
            type: boolean
        - name: editable
          description: Determines whether or not this DataSetView definition should be
            editable by the user.  Some documents are 'locked' and not available
            for edit.
          required: false
          in: query
          schema:
            type: boolean
        - name: sdsVersion
          description: The semantic version of the SDS this view (and it's transforms) are
            compatible with.
          required: false
          in: query
          schema:
            type: string
        - name: basePath
          description: Fully qualified base path for all DataSetFiles associated with this
            view. For views cached in a database (HBase or Cassandra), supply a
            templatized DSN.
          required: false
          in: query
          schema:
            type: string
        - name: isCached
          description: Some DataSetViews are pre-cached in a high-speed lookup table for
            faster access, this flag indicates if that has been done.
          required: false
          in: query
          schema:
            type: boolean
        - name: status
          description: Describes the current state of the view.  If a view is not enabled,
            it should not be used by any process even when it is specified as a
            dependency. Only one view of a given aspect should be enabled at any
            time. For example, no DataSet should have more than one enabled
            production or sandbox view.
          required: false
          in: query
          schema:
            type: string
        - name: saveStrategy
          description: Denotes save strategy for this dataset.
          required: false
          in: query
          schema:
            type: string
        - name: aspect
          description: Aspect represents the particular perspective or target you're after
            when viewing a dataset. Sandbox views are a version of the dataset
            that's being used to iterate towards a final ETL job definition. The
            production aspect is then used (by default).
          required: false
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
      responses:
        "200":
          description: List of dependent dataSetViews.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/dataSetViewResponse"
              examples:
                response:
                  value:
                    5ab54170864cf0267448ead5:
                      version: 1.0.0
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      dataSetId: 5ab540d0864cf0267448ead4
                      aspect: production
                      status: enabled
                      editable: false
                      fields:
                        []
                      storageType: s3
                      basePath: s3://bar/ball/baz
                      fileDescription:
                        persisted: false
                      created: 1521828208046
                      updated: 1521828208046
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      updatedUser: acp_foundation_catalog@AdobeID
                      observableSchema:
                        {}
                      transforms: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/transforms"
                      files: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/files"
                      isLookup: false
                      tags:
                        foo:
                          - bar
                          - foos
                          - ball
                        adobe/touchpoint/appliedTransformations:
                          - CLUSTERED:FOO
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  /dataSetFiles:
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches a list of DataSetFiles.
      operationId: get_data_set_files
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/created"
        - $ref: "#/components/parameters/createdClient"
        - $ref: "#/components/parameters/createdAfter"
        - $ref: "#/components/parameters/createdBefore"
        - $ref: "#/components/parameters/updated"
        - $ref: "#/components/parameters/createdUser"
        - $ref: "#/components/parameters/updatedUser"
        - name: folderName
          description: Filter by the name of the folder as it resides in the basePath
            (provided from the DataSetView).
          required: false
          in: query
          schema:
            type: string
        - name: batchId
          description: Filter by the ID of the Batch operation that created this
            DataSetFile.
          required: false
          in: query
          schema:
            type: string
        - name: dataSetViewId
          description: Filter by the ID of the owning DataSetView.
          required: false
          in: query
          schema:
            type: string
        - name: records
          description: Filter by the number of records/rows/transactions contained in file
            represented by this DataSetFile.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: size
          description: Filter by the size for the file in bytes.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: isValid
          description: True if the file can still be used. False if the file was part of a
            batch that was mistakenly uploaded or incorrect, and should no
            longer be considered. This query param can be used to filter all
            files with isValid field value.
          required: false
          in: query
          schema:
            type: boolean
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
      responses:
        "200":
          description: List of dataSetFiles associated with given ims_org_id.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/dataSetFileResponse"
              examples:
                response:
                  value:
                    5ab54170864cf0267448ead5:
                      version: 1.0.0
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      dataSetId: 5ab540d0864cf0267448ead4
                      aspect: production
                      status: enabled
                      editable: false
                      fields:
                        []
                      storageType: s3
                      basePath: s3://bar/ball/baz
                      fileDescription:
                        persisted: false
                      created: 1521828208046
                      updated: 1521828208046
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      updatedUser: acp_foundation_catalog@AdobeID
                      observableSchema:
                        {}
                      transforms: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/transforms"
                      files: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/files"
                      isLookup: false
                      tags:
                        foo:
                          - bar
                          - foos
                          - ball
                        adobe/touchpoint/appliedTransformations:
                          - CLUSTERED:FOO
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    post:
      security:
        - Bearer:
            []
      summary: Saves a new DataSetFile.
      operationId: post_data_set_file
      requestBody:
        $ref: "#/components/requestBodies/dataSetFileRequest"
      responses:
        "201":
          description: Array[ @/dataSets/dataSetFileId ]
          headers:
            Location:
              description: The URI of the newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    delete:
      security:
        - Bearer:
            []
      summary: Deletes a DataSetFile based on a search criteria.
      operationId: delete_data_set_file_by_search
      parameters:
        - name: batchId
          description: ID of the batch object associated with the creation of a DataSetFile.
          required: false
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/property"
      responses:
        "200":
          description: Array[ @/dataSets/dataSetFileId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/dataSetFiles/{id}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches DataSetFiles by ID.
      operationId: get_data_set_file_by_id
      responses:
        "200":
          description: connections response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/dataSetFileResponse"
              examples:
                response:
                  value:
                    5abd49645591445e1ba04f87:
                      version: 1.0.0
                      created: 1522354532905
                      updated: 1522354532905
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      dataSetViewId: 5ab54170864cf0267448ead5
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      updatedUser: acp_foundation_catalog@AdobeID
                      availableDates:
                        startDate: 4444
                        endDate: 5555
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    put:
      security:
        - Bearer:
            []
      summary: Updates an existing DataSetFile by ID.
      operationId: update_data_set_file_by_id
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dataSetFileRequest"
        description: Data set file field(s) to be updated.
        required: true
      responses:
        "200":
          description: " @/dataSets/dataSetFileId "
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    patch:
      security:
        - Bearer:
            []
      summary: Updates specified attributes of an existing DataSetFile.
      operationId: patch_data_set_file_by_id
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dataSetFilePatchRequest"
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/dataSetFilePatchRequest"
        description: DataSetFile field(s) to be updated.
        required: true
      responses:
        "200":
          description: "@/dataSets/dataSetFileId"
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    delete:
      security:
        - Bearer:
            []
      summary: Deletes a DataSetFile by ID.
      operationId: delete_data_set_file_by_id
      responses:
        "200":
          description: "@/dataSetFiles/"
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  /:
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches resource links for the Catalog Service.
      operationId: get_service_resources
      parameters:
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
      responses:
        "200":
          description: serviceResources
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/serviceResources"
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    post:
      security:
        - Bearer:
            []
      summary: Allows for multiple and related Catalog API calls.
      operationId: post_service_resources
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/resourceItem"
        description: "See:
          https://wiki.corp.adobe.com/pages/viewpage.action?spaceKey=DMSArchite\
          cture&title=Catalog+Service#CatalogService-BatchingCatalogAPIRequests\
          ."
        required: true
      responses:
        "201":
          description: Array[ @/resource/resourceId ]
          headers:
            Location:
              description: The URI of the newly created resource
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  /transforms:
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches a list of Transforms.
      operationId: get_transforms
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/updated"
        - $ref: "#/components/parameters/createdClient"
        - $ref: "#/components/parameters/createdUser"
        - $ref: "#/components/parameters/updatedUser"
        - name: name
          description: Filter by the human-readable name or title for this Transform.
          required: false
          in: query
          schema:
            type: string
        - name: body
          description: Filter by the  lines of script that make up the
            transformation/mapping logic for this Transform.
          required: false
          in: query
          schema:
            type: string
        - name: order
          description: For transforms execution order matters. The service does not enforce
            uniqueness an maintains determinism by using a sort of
            {order,created} to manage orders with the same value.
          required: false
          in: query
          schema:
            type: integer
        - name: created
          description: Filter by the Unix timestamp (in milliseconds) when this DataSetView
            was persisted.
          required: false
          in: query
          schema:
            type: integer
            format: int64
        - name: language
          description: Filter by the type of language this transform's body contains.
          required: false
          in: query
          schema:
            type: string
        - name: codeUrl
          description: If the body of this transform is not used, it is expected that a URL
            pointing to the location of the code to be used for this transform
            is placed in this field.
          required: false
          in: query
          schema:
            type: string
        - name: vehicleUrl
          description: The URL of the vehicle that will orchestrate or otherwise run the
            code in this transform.
          required: false
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
      responses:
        "200":
          description: List of transforms associated with given ims_org_id.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/transformResponse"
              examples:
                response:
                  value:
                    5abac7063998860540c7b848:
                      version: 1.0.5
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      created: 1522190086195
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      updatedUser: acp_foundation_catalog@AdobeID
                      updated: 1522190612384
                      codeUrl: git://example.com/foo/bar/something.git
                      args:
                        - --context_param
                          profile_dsv_in0.inputPath=${CATALOG.DSV.5ab540d0864cf0267448ead4.inputFiles}
                      inputs:
                        []
                      outputs:
                        - dataSet: "@/dataSets/123456"
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    post:
      security:
        - Bearer:
            []
      summary: Saves a new Transform.
      operationId: post_transform
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/transformRequest"
        description: Transform to be posted
        required: true
      responses:
        "201":
          description: Array[ @/transforms/transformId ]
          headers:
            Location:
              description: The URI of the newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/transforms/{id}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches Transforms by ID.
      operationId: get_transform_by_id
      responses:
        "200":
          description: Transform object for given transformId.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/transformResponse"
              examples:
                response:
                  value:
                    5abac7063998860540c7b848:
                      version: 1.0.5
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      created: 1522190086195
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      updatedUser: acp_foundation_catalog@AdobeID
                      updated: 1522190612384
                      codeUrl: git://example.com/foo/bar/something.git
                      args:
                        - --context_param
                          profile_dsv_in0.inputPath=${CATALOG.DSV.5ab540d0864cf0267448ead4.inputFiles}
                      inputs:
                        []
                      outputs:
                        - dataSet: "@/dataSets/123456"
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    put:
      security:
        - Bearer:
            []
      summary: Updates an existing Transform by ID.
      operationId: update_transform_by_id
      parameters:
        - $ref: "#/components/parameters/if-match"
        - $ref: "#/components/parameters/if-none-match"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/transformRequest"
        description: Transform field(s) to be updated.
        required: true
      responses:
        "200":
          description: Array[ @/transforms/transformId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    patch:
      security:
        - Bearer:
            []
      summary: Updates specified attributes of an existing transform.
      operationId: patch_transform_by_id
      parameters:
        - $ref: "#/components/parameters/if-match"
        - $ref: "#/components/parameters/if-none-match"
      responses:
        "200":
          description: Array[ @/transforms/transformId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    delete:
      security:
        - Bearer:
            []
      summary: Deletes a Transform by ID.
      operationId: delete_transform_by_id
      responses:
        "200":
          description: Array[ @/transforms/transformId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/transforms/{id}/inputs":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches inputs for a specific Transform.
      operationId: get_inputs_by_transform_id
      parameters:
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
        - $ref: "#/components/parameters/tags"
      responses:
        "200":
          description: "Array[ {dataset: @/dataSets/dataSetId }]"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                additionalProperties:
                  $ref: "#/components/schemas/dataSetResponse"
              examples:
                response:
                  value:
                    5ab540d0864cf0267448ead4:
                      version: 1.0.0
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      connectorId: s3-push
                      connectionId: 5ab5249e864cf0267448ead1
                      name: connections functional tests - 1521827915638
                      created: 1521828048923
                      updated: 1521828208046
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      updatedUser: acp_foundation_catalog@AdobeID
                      namespace: ACP
                      state: DRAFT
                      tags:
                        foo:
                          - bar
                          - foos
                          - ball
                        adobe/touchpoint/appliedTransformations:
                          - CLUSTERED:FOO
                      viewId: 5ab54170864cf0267448ead5
                      aspect: production
                      status: enabled
                      fields:
                        []
                      basePath: s3://bar/ball/baz
                      fileDescription:
                        persisted: false
                      transforms: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/transforms"
                      files: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/files"
                      observableSchema:
                        {}
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    patch:
      security:
        - Bearer:
            []
      summary: Updates inputs attributes of an existing transform.
      operationId: patch_inputs_by_transform_id
      parameters:
        - $ref: "#/components/parameters/if-match"
        - $ref: "#/components/parameters/if-none-match"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  dataSet:
                    type: string
          application/json-patch+json:
            schema:
              type: array
              items:
                type: object
                properties:
                  dataSet:
                    type: string
        description: 'Array[ {"dataSet": "@/dataSets/dataSetId"}]'
        required: true
      responses:
        "200":
          description: Array[ @/transforms/transformId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/transforms/{id}/outputs":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches outputs for a specific Transform.
      operationId: get_outputs_by_transform_id
      parameters:
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
        - $ref: "#/components/parameters/tags"
      responses:
        "200":
          description: "Array[ {dataset: @/dataSets/dataSetId }]"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                additionalProperties:
                  $ref: "#/components/schemas/dataSetResponse"
              examples:
                response:
                  value:
                    5ab540d0864cf0267448ead4:
                      version: 1.0.0
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      connectorId: s3-push
                      connectionId: 5ab5249e864cf0267448ead1
                      name: connections functional tests - 1521827915638
                      created: 1521828048923
                      updated: 1521828208046
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      updatedUser: acp_foundation_catalog@AdobeID
                      namespace: ACP
                      state: DRAFT
                      tags:
                        foo:
                          - bar
                          - foos
                          - ball
                        adobe/touchpoint/appliedTransformations:
                          - CLUSTERED:FOO
                      viewId: 5ab54170864cf0267448ead5
                      aspect: production
                      status: enabled
                      fields:
                        []
                      basePath: s3://bar/ball/baz
                      fileDescription:
                        persisted: false
                      transforms: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/transforms"
                      files: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/files"
                      observableSchema:
                        {}
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    patch:
      security:
        - Bearer:
            []
      summary: Updates outputs attributes of an existing transform.
      operationId: patch_outputs_by_transform_id
      parameters:
        - $ref: "#/components/parameters/if-match"
        - $ref: "#/components/parameters/if-none-match"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  dataSet:
                    type: string
          application/json-patch+json:
            schema:
              type: array
              items:
                type: object
                properties:
                  dataSet:
                    type: string
        description: array of outputs for the transforms
        required: true
      responses:
        "200":
          description: Array[ @/transforms/transformId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/transforms/{id}/inputs/{dataSetId}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches an input DataSet for the specified Transform.
      operationId: get_inputs_by_transform_id_and_data_set_id
      parameters:
        - name: dataSetId
          description: The ID of the dataSet
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Data Set Object
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/dataSetResponse"
              examples:
                response:
                  value:
                    5ab540d0864cf0267448ead4:
                      version: 1.0.0
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      connectorId: s3-push
                      connectionId: 5ab5249e864cf0267448ead1
                      name: connections functional tests - 1521827915638
                      created: 1521828048923
                      updated: 1521828208046
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      updatedUser: acp_foundation_catalog@AdobeID
                      namespace: ACP
                      state: DRAFT
                      tags:
                        foo:
                          - bar
                          - foos
                          - ball
                        adobe/touchpoint/appliedTransformations:
                          - CLUSTERED:FOO
                      viewId: 5ab54170864cf0267448ead5
                      aspect: production
                      status: enabled
                      fields:
                        []
                      basePath: s3://bar/ball/baz
                      fileDescription:
                        persisted: false
                      transforms: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/transforms"
                      files: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/files"
                      observableSchema:
                        {}
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    delete:
      security:
        - Bearer:
            []
      summary: Deletes an input DataSet for the specified Transform.
      operationId: delete_inputs_by_transform_id_and_data_set_id
      parameters:
        - name: dataSetId
          description: dataSetId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Array[ @/transforms/transformId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  "/transforms/{id}/outputs/{dataSetId}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/id"
    get:
      security:
        - Bearer:
            []
      summary: Fetches an output DataSet for the specified Transform.
      operationId: get_outputs_by_transform_id_and_data_set_id
      parameters:
        - name: dataSetId
          description: dataSet Id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Data Set Object
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/dataSetResponse"
              examples:
                response:
                  value:
                    5ab540d0864cf0267448ead4:
                      version: 1.0.0
                      imsOrg: 4F3BB22C5631222A7F000101@AdobeOrg
                      connectorId: s3-push
                      connectionId: 5ab5249e864cf0267448ead1
                      name: connections functional tests - 1521827915638
                      created: 1521828048923
                      updated: 1521828208046
                      createdClient: acp_foundation_catalog
                      createdUser: acp_foundation_catalog@AdobeID
                      updatedUser: acp_foundation_catalog@AdobeID
                      namespace: ACP
                      state: DRAFT
                      tags:
                        foo:
                          - bar
                          - foos
                          - ball
                        adobe/touchpoint/appliedTransformations:
                          - CLUSTERED:FOO
                      viewId: 5ab54170864cf0267448ead5
                      aspect: production
                      status: enabled
                      fields:
                        []
                      basePath: s3://bar/ball/baz
                      fileDescription:
                        persisted: false
                      transforms: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/transforms"
                      files: "@/dataSets/5ab540d0864cf0267448ead4/views/5ab54170864c\
                        f0267448ead5/files"
                      observableSchema:
                        {}
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
    delete:
      security:
        - Bearer:
            []
      summary: Deletes an output DataSet for the specified Transform.
      operationId: delete_outputs_by_transform_id_and_data_set_id
      parameters:
        - name: dataSetId
          description: dataSetId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Array[ @/transforms/transformId ]
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
  /xdms:
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
    get:
      security:
        - Bearer:
            []
      summary: Return a list of all XDM schema or view a specific schema using the {id}
        query parameter.
      description: <p>A GET request to /xdms returns a list of all XDM schema within the
        organization, including standard schemas, customer-defined schemas, and
        customer-defined extensions to standard schemas. Including the {id}
        query parameter in the GET request returns the details of the specific
        schema with that {id}.</p><br/><p><strong>Sample
        Request:</strong></p><br/><pre>curl -X GET \
        <br/>  https://platform.adobe.io/data/foundation/catalog/xdms
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        </pre><br/><p>The response body contains an array of objects with one
        object for each "namespace". The "paths" array inside each object then
        lists the path to each individual schema. The schema are shown in the
        format "@/xdms/{id}", where {id} is "namespace/objectName". See example
        in the Response section below.</p><br/><p>When the {id} is used as a
        query parameter, the request returns a specific schema, including all
        fields and metadata for that schema.</p><br/><p><strong>Sample
        Request:</strong></p><br/><pre>curl -X GET \
        <br/>  https://platform.adobe.io/data/foundation/catalog/xdms?id=context/person
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        </pre><br/><p>More information regarding how to use the Schema Registry
        API is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      operationId: get_all_objects_in_org
      parameters:
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
        - $ref: "#/components/parameters/xdmVersion"
      responses:
        "200":
          description: Returns a list of all XDM schemas or details of a specific schema by
            its {id}.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmListAllSchema"
              examples:
                response:
                  value:
                    - namespace: channels
                      type: standard
                      paths:
                        - "@/xdms/channels/adm"
                        - "@/xdms/channels/agency"
                        - "@/xdms/channels/apns"
                        - "@/xdms/channels/application"
                        - "@/xdms/channels/baidu"
                        - "@/xdms/channels/channel"
                        - "@/xdms/channels/direct-mail"
                        - "@/xdms/channels/email"
                        - "@/xdms/channels/facebook-feed"
                    - namespace: common
                      type: standard
                      paths:
                        - "@/xdms/common/auditable"
                        - "@/xdms/common/geo"
                        - "@/xdms/common/geounit"
                        - "@/xdms/common/organization"
                        - "@/xdms/common/orgunit"
                    - namespace: content
                      type: standard
                      paths:
                        - "@/xdms/content/productlistitem"
                    - namespace: context
                      type: standard
                      paths:
                        - "@/xdms/context/advertising"
                        - "@/xdms/context/advertising-break"
                        - "@/xdms/context/advertising-timed-asset-reference"
                        - "@/xdms/context/advertising-timed-asset-view-details"
                        - "@/xdms/context/adviewability"
                        - "@/xdms/context/application"
                        - "@/xdms/context/subscription"
                        - "@/xdms/context/webinfo"
                        - "@/xdms/context/webinteraction"
                        - "@/xdms/context/webpagedetails"
                        - "@/xdms/context/webreferrer"
                    - namespace: data
                      type: standard
                      paths:
                        - "@/xdms/data/application-closes"
                        - "@/xdms/data/bitrate-average"
                        - "@/xdms/data/clicks"
                        - "@/xdms/data/metrics/advertising/impressions"
                        - "@/xdms/data/viewablethirdquartiles"
                    - namespace: external
                      type: standard
                      paths:
                        - "@/xdms/external/iptc/creator"
                        - "@/xdms/external/iptc/episode"
                        - "@/xdms/external/iptc/rating"
                        - "@/xdms/external/iptc/season"
                        - "@/xdms/external/iptc/series"
                        - "@/xdms/external/schema/geocircle"
                        - "@/xdms/external/schema/geocoordinates"
                        - "@/xdms/external/schema/geoshape"
                    - namespace: _customer
                      type: non-standard
                      paths:
                        - "@/xdms/_customer/retail/customer"
                        - "@/xdms/_customer/web/user"
                    - namespace: extension
                      type: non-standard
                      paths:
                        - "@/xdms/context/profile/_customer/retail"
                        - "@/xdms/context/person/_customer/web"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "401013"
                    message: Description of error.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "403010"
                    message: Description of error.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 404
                    title: NotFoundError
                    detail: Description of error.
        "500":
          description: Internal Server Error
        default:
          description: Unexpected error
  "/xdms/{namespace}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/namespace"
    get:
      security:
        - Bearer:
            []
      summary: Return details for every schema in a specific {namespace}, including
        fields and metadata.
      description: <p>To view all schema within a specific namespace, issue a GET request
        to /xdms/{namespace}. </p><br/><p><strong>Sample
        Request:</strong></p><br/><pre>curl -X GET \
        <br/>  https://platform.adobe.io/data/foundation/catalog/xdms/context
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        </pre><br/><p>The response body is a single object containing top level
        fields for each schema in the {namespace}. The individual schema objects
        contain the fields and metadata for that schema. See example in the
        Response section below.</p><br/><p>More information regarding how to use
        the Schema Registry API is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      operationId: get_obects_in_namespace
      parameters:
        - $ref: "#/components/parameters/excludeExtension"
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/properties"
        - $ref: "#/components/parameters/xdmVersion"
      responses:
        "200":
          description: Returns details for every schema in the {namespace} including fields
            and metadata.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmNamespaceDetail"
              examples:
                response:
                  value:
                    schema1:
                      title: Sample Schema 1
                      type: object
                      description: Description of this schema.
                      properties:
                        field1:
                          title: Field 1
                          description: Description for this field.
                          type: string
                          enum:
                            - option1
                            - option2
                            - option3
                            - option4
                          meta:enum:
                            option1: Option 1
                            option2: Option 2
                            option3: Option 3
                            option4: Option 4
                          default: option1
                        field2:
                          title: Field 2
                          description: Description of this field.
                          type: number
                    schema2:
                      title: Sample Schema 2
                      type: object
                      description: Description of this schema.
                      properties:
                        field1:
                          title: Field 1
                          type: string
                          format: date-time
                          description: Description for this field.
                        field2:
                          title: Field 2
                          type: number
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "400003"
                    message: Description of error.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "403000"
                    message: Description of error.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 404
                    title: NotFoundError
                    detail: Description of error.
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
  "/xdms/{namespace}/{objectName}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/namespace"
    get:
      security:
        - Bearer:
            []
      summary: Return details for a specific schema. Equivalent to GET /xdms?id={id}.
      operationId: get_obect_in_namespace
      description: <p>To view details for a specific schema, including all fields and
        metadata, issue a GET request to /xdms/{namespace}/{objectName}. This is
        equivalent to using the {id} query parameter in a GET /xdms request.
        </p><br/><p><strong>Sample Request:</strong></p><br/><pre>curl -X GET \
        <br/>  https://platform.adobe.io/data/foundation/catalog/xdms/context/person
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        </pre><br/><p>The response body is a single object containing the
        schema, its fields, and related metadata. Setting the query parameter
        'excludeExtension' returns the schema with or without the "_customer"
        extension. See example in the Response section below.</p><br/><p>More
        information regarding how to use the Schema Registry API is available in
        the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      parameters:
        - $ref: "#/components/parameters/expansion"
        - $ref: "#/components/parameters/excludeExtension"
        - $ref: "#/components/parameters/objectName"
        - $ref: "#/components/parameters/xdmVersion"
      responses:
        "200":
          description: Returns details for a specific schema.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmSchema"
              examples:
                response:
                  value:
                    title: Sample Schema 1
                    type: object
                    description: Description of this schema.
                    properties:
                      field1:
                        title: Field 1
                        description: Description for this field.
                        type: string
                        enum:
                          - option1
                          - option2
                          - option3
                          - option4
                        meta:enum:
                          option1: Option 1
                          option2: Option 2
                          option3: Option 3
                          option4: Option 4
                        default: option1
                      field2:
                        title: Field 2
                        description: Description of this field.
                        type: number
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "400003"
                    message: Description of error.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "403000"
                    message: Description of error.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 404
                    title: NotFoundError
                    detail: Description of error.
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
  /xdms/_customer:
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
    get:
      security:
        - Bearer:
            []
      summary: Return details for every schema defined by the IMS Org.
      description: <p><strong>Understanding the <code>_customer</code>
        Keyword:</strong></p><br/><p>_customer is a short-hand representation of
        an individual IMS Organization. Instead of needing to enter the full IMS
        Org for every call, the API uses _customer instead. _customer represents
        the unique customer section that every Adobe provided schema can have.
        Behind the scenes, the schema registry converts _customer and stores
        everything under the related IMS Org. Within the registry, a single IMS
        Org has access to all of its _customer extensions and schemas. It is not
        possible for IMS Orgs to see _customer extensions or schemas from other
        organizations.</p><br/><p>To view the details for every schema defined
        by the IMS Org, issue a GET request to /xdms/_customer.
        </p><br/><p><strong>Sample Request:</strong></p><br/><pre>curl -X GET \
        <br/>  https://platform.adobe.io/data/foundation/catalog/xdms/_customer
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        </pre><br/><p>The response body is a single object containing top level
        fields for each customer-defined schema. The individual schema objects
        contain the fields and metadata for that schema. See example in the
        Response section below.</p><br/><p>More information regarding how to use
        the Schema Registry API is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      operationId: get_all_custom_objects
      responses:
        "200":
          description: Returns details for every customer-defined schema including fields
            and metadata.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmNamespaceDetail"
              examples:
                response:
                  value:
                    web/visitor:
                      title: Website Visitors
                      type: object
                      description: Description of this schema.
                      properties:
                        field1:
                          title: Field 1
                          type: string
                          format: date-time
                          description: Description for this field.
                        field2:
                          title: Field 2
                          type: number
                    retail/store:
                      title: Retail Stores
                      type: object
                      description: Description of this schema.
                      properties:
                        field1:
                          title: Field 1
                          description: Description for this field.
                          type: string
                          enum:
                            - option1
                            - option2
                            - option3
                            - option4
                          meta:enum:
                            option1: Option 1
                            option2: Option 2
                            option3: Option 3
                            option4: Option 4
                          default: option1
                        field2:
                          title: Field 2
                          description: Description of this field.
                          type: number
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "400003"
                    message: Description of error.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "403000"
                    message: Description of error.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 404
                    title: NotFoundError
                    detail: Description of error.
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
  "/xdms/_customer/{extensionNS}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/extensionNS"
    get:
      security:
        - Bearer:
            []
      summary: Return a list of all customer-defined schema within a specific namespace.
      description: <p>A GET request to /xdms/_customer/{extensionNS} returns a list of all
        customer-defined schema within the specified "extension namespace".
        Customer-defined namespaces are unique to each IMS Org and are referred
        to as "extension namespaces" to avoid confusion with Adobe-defined
        "namespaces" that are available to all users.</p><br/><p><strong>Sample
        Request:</strong></p><br/><pre>curl -X GET \
        <br/>  https://platform.adobe.io/data/foundation/catalog/xdms/_customer/retail
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        </pre><br/><p>The response body is an array containing every schema in
        the specified "namespace". The schema are shown in the format
        "@/xdms/_customer/{id}", where {id} is the "extensionNS/objectName". See
        example in the Response section below.</p><br/><p>More information
        regarding how to use the Schema Registry API is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      operationId: get_custom_objects
      responses:
        "200":
          description: Returns a list of all schema in the specified namespace.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                response:
                  value:
                    - "@/xdms/_customer/retail/loyaltyprogram"
                    - "@/xdms/_customer/retail/store"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "400003"
                    message: Description of error.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "403000"
                    message: Description of error.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 404
                    title: NotFoundError
                    detail: Description of error.
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
  "/xdms/_customer/{extensionNS}/{objectName}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/extensionNS"
      - $ref: "#/components/parameters/objectName"
    get:
      security:
        - Bearer:
            []
      summary: Return details for a specific customer-defined schema.
      operationId: get_custom_object
      description: <p>To view details for a specific customer-defined schema, including all
        fields and metadata, issue a GET request to
        /xdms/_customer/{extensionNS}/{objectName}.</p><br/><p><strong>Sample
        Request:</strong></p><br/><pre>curl -X GET \
        <br/>  https://platform.adobe.io/data/foundation/catalog/xdms/_customer/web/flights
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        </pre><br/><p>The response body is a single object containing the
        schema, its fields, and related metadata. See example in the Response
        section below.</p><br/><p>More information regarding how to use the
        Schema Registry API is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      parameters:
        - $ref: "#/components/parameters/expansion"
        - $ref: "#/components/parameters/excludeExtension"
        - $ref: "#/components/parameters/objectName"
        - $ref: "#/components/parameters/xdmVersion"
      responses:
        "200":
          description: Returns details for a specific customer-defined schema.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmExtensionResponse"
              examples:
                response:
                  value:
                    title: Flights
                    type: object
                    description: Data for all available flights.
                    properties:
                      flightId:
                        title: Flight ID
                        type: string
                        description: The unique ID of the flight.
                        meta:xdmType: string
                      flightNumber:
                        title: Flight Number
                        type: string
                        description: Flight Number provided by the carrier.
                        meta:xdmType: string
                      carrier:
                        title: Carrier
                        type: string
                        description: Name of the flight carrier.
                        meta:xdmType: string
                      carrierAddress:
                        title: Carrier Address
                        description: Address of the flight carrier.
                    extNamespace: web
                    imsOrg: "{IMS_ORG}"
                    createdClient: "{string}"
                    updatedUser: "{string}@AdobeID"
                    version: "1"
                    created: 1536692957370
                    updated: 1536692957370
                    id: _customer/web/flights
                    meta:altId: _customer.web.flights
                    $id: _customer/web/flights
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "400003"
                    message: Description of error.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "403000"
                    message: Description of error.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 404
                    title: NotFoundError
                    detail: Description of error.
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
    post:
      security:
        - Bearer:
            []
      summary: Create a new customer-defined schema within a specific namespace.
      description: <p>If an existing schema is not available as a starting point, a new
        schema can be created by issuing a POST request to /xdms/_customer/{id},
        where {id} is the "extensionNS/objectName". Individual IMS Orgs can
        create multiple "extension namespaces" to help group schema together
        (e.g. "web" and "retail").</p><br/><p>The header
        'Content-Type:application/json' must be included in the request, and the
        request body must include all fields being
        defined.</p><br/><p><strong>Sample Request:</strong></p><br/><pre>curl
        -X POST \
        <br/>  https://platform.adobe.io/data/foundation/catalog/xdms/_customer/web/flights
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        <br/>  -H 'content-type:application/json' \ <br/>  -d '{
        <br/>        "title":"Flights",<br/>        "type":"object",<br/>        "description":"Data
        for all available flights.",<br/>        "properties":{
        <br/>          "flightId" { <br/>            "title":"Flight
        ID",<br/>            "type":"string",
        <br/>            "description":"The unique ID of the
        flight."<br/>           }, <br/>          "flightNumber" {
        <br/>            "title":"Flight Number",
        <br/>            "type":"string", <br/>            "description":"Flight
        Number provided by the carrier." <br/>           }<br/>         }
        <br/>      }' </pre><br/><p>The response to this request is an array
        containing a single path to the newly created schema. See example in the
        Response section below.</p><br/><p>More information regarding how to use
        the Schema Registry API is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      operationId: post_custom_object
      requestBody:
        $ref: "#/components/requestBodies/xdmExtensionRequest"
      responses:
        "201":
          description: Returns the path to the newly created schema.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                response:
                  value:
                    - "@/xdms/_customer/web/flights"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "400003"
                    message: Description of error.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "403000"
                    message: Description of error.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 404
                    title: NotFoundError
                    detail: Description of error.
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
    put:
      security:
        - Bearer:
            []
      summary: Create or update a customer-defined schema within a specific namespace.
      description: <p>A PUT request to /xdms/_customer/{id}, where {id} is the
        "extensionNS/objectName", can be used to both create and update
        customer-defined schemas within a specific namespace. Individual IMS
        Orgs can create multiple "extension namespaces" to help group schema
        together (e.g. "web" and "retail").</p><br/><p>The header
        'Content-Type:application/json' must be included in the request, and the
        request body must include all fields being
        defined.</p><br/><p><strong>Notes for Updating
        Schema:</strong></p><br/><p>A PUT request is essentially
        <em>re-writing</em> the schema. Therefore, the payload of the PUT
        request must include ALL fields (old and new) that are to be included in
        the schema. It is recommended to view (GET) the schema first to see the
        fields that are currently in the schema, then update (PUT) the schema
        with all fields (those previously defined and those being added) in the
        request body.</p><br/><p><strong>Sample
        Request:</strong></p><br/><pre>curl -X PUT \
        <br/>  https://platform.adobe.io/data/foundation/catalog/xdms/_customer/web/flights
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        <br/>  -H 'content-type:application/json' \ <br/>  -d '{
        <br/>        "title":"Flights",<br/>        "type":"object",<br/>        "description":"Data
        for all available flights.",<br/>        "properties":{
        <br/>          "flightId":{ <br/>            "title":"Flight
        ID",<br/>            "type":"string",
        <br/>            "description":"The unique ID of the
        flight."<br/>           }, <br/>          "flightNumber":{
        <br/>            "title":"Flight Number",
        <br/>            "type":"string", <br/>            "description":"Flight
        Number provided by the carrier."
        <br/>           },<br/>          "carrier":{
        <br/>             "title":"Carrier", <br/>             "type":"string",
        <br/>             "description":"Name of the flight carrier."
        <br/>           }<br/>         } <br/>       }' </pre><br/><p>The
        response to this request is an array containing a single path to the
        created or updated schema. See example in the Response section
        below.</p><br/><p>More information regarding how to use the Schema
        Registry API is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      operationId: create_or_update_custom_object
      requestBody:
        $ref: "#/components/requestBodies/xdmExtensionRequest"
      responses:
        "200":
          description: Returns the path to the updated schema.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                response:
                  value:
                    - "@/xdms/_customer/web/flights"
        "201":
          description: Returns the path to the newly created schema.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                response:
                  value:
                    - "@/xdms/_customer/web/flights"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "400003"
                    message: Description of error.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "403000"
                    message: Description of error.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 404
                    title: NotFoundError
                    detail: Description of error.
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
    delete:
      security:
        - Bearer:
            []
      summary: Remove customer-defined schema.
      description: <p>An IMS Org is able to remove a schema that it has defined by issuing
        a DELETE request to /xdms/_customer/{id}, where {id} is the
        "extensionNS/objectName" of the schema to be deleted. <strong>This
        action cannot be undone.</strong></p><br/><p>Platform does not support
        breaking changes, therefore deleting schemas is not recommended and
        should only be done if absolutely necessary.</p><br/><p><strong>Sample
        Request:</strong></p><br/><pre>curl -X DELETE \
        <br/>  https://platform.adobe.io/data/foundation/catalog/xdms/_customer/web/flights
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        <br/>   </pre><br/><p>The response to this request is an array
        containing a single path to the deleted schema. See example in the
        Response section below.</p><br/><p>More information regarding how to use
        the Schema Registry API is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      operationId: remove_custom_object
      responses:
        "200":
          description: Returns the path to the deleted schema.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                response:
                  value:
                    - "@/xdms/_customer/web/flights"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "400003"
                    message: Description of error.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "403000"
                    message: Description of error.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 404
                    title: NotFoundError
                    detail: Description of error.
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
  "/xdms/{namespace}/{objectName}/_customer":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/namespace"
      - $ref: "#/components/parameters/objectName"
    get:
      security:
        - Bearer:
            []
      summary: Return a list of all customer-defined extensions for a specific schema.
      description: <p>An IMS Org may define multiple extensions to a single standard
        schema. Extensions are used to express non-standard data unique to the
        organization. To view a list of extensions on a specific schema, issue a
        GET request to /xdms/{id}/_customer/, where {id} is the
        "namespace/objectName" of the standard schema.</p><br/><p><strong>Sample
        Request:</strong></p><br/><pre>curl -X GET \
        <br/>  https://platform.adobe.io/data/foundation/catalog/xdms/context/person/_customer
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        </pre><br/><p>The response body is an array containing the path for each
        customer-defined extension. The extensions are shown in the format
        "@/xdms/{id}/_customer/{extensionNS}". See example in the Response
        section below.</p><br/><p>More information regarding how to use the
        Schema Registry API is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      operationId: get_all_extensions_to_object
      parameters:
        - $ref: "#/components/parameters/expansion"
      responses:
        "200":
          description: Returns a list of all customer-defined extensions for a specific
            schema.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                response:
                  value:
                    - "@/xdms/context/person/_customer/retail"
                    - "@/xdms/context/person/_customer/flights"
                    - "@/xdms/context/person/_customer/web"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "400003"
                    message: Description of error.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "403000"
                    message: Description of error.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 404
                    title: NotFoundError
                    detail: Description of error.
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
  "/xdms/{namespace}/{objectName}/_customer/{extensionNS}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/namespace"
      - $ref: "#/components/parameters/objectName"
      - $ref: "#/components/parameters/extensionNS"
    get:
      security:
        - Bearer:
            []
      summary: Return the details for a specific extension to the specified schema.
      description: <p>To view the details for a specific customer-defined extension,
        including all fields and metadata, issue a GET request to
        /xdms/{id}/_customer/{extensionNS}.</p><br/><p><strong>Sample
        Request:</strong></p><br/><pre>curl -X GET \
        <br/>  https://platform.adobe.io/data/foundation/catalog/xdms/context/person/_customer/retail
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        </pre><br/><p>The response body is a single object containing the
        extension, its fields, and related metadata. See example in the Response
        section below.</p><br/><p>More information regarding how to use the
        Schema Registry API is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      operationId: get_extension_to_object
      parameters:
        - $ref: "#/components/parameters/expansion"
      responses:
        "200":
          description: Returns details for a specific extension to the specified schema.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmExtensionResponse"
              examples:
                response:
                  value:
                    type: object
                    title: Retail Fields
                    description: Custom fields for retail division
                    properties:
                      homeStoreId:
                        title: Home Store ID
                        type: string
                        description: Unique ID of the individual's home store.
                        meta:xdmType: string
                      loyaltyMember:
                        title: Loyalty Program Member
                        type: boolean
                        default: false
                        description: Is this individual a member of the Loyalty Program?
                        meta:xdmType: boolean
                      loyaltyLevel:
                        title: Loyalty Program Membership Level
                        type: string
                        description: Current membership level within the Loyalty Program.
                        meta:xdmType: string
                      loyaltyJoinDate:
                        title: Loyalty Program Join Date
                        type: string
                        format: date
                        description: Date individual joined the Loyalty Program.
                        meta:xdmType: string
                    extNamespace: retail
                    version: "1"
                    created: 1536960928251
                    updated: 1536961492965
                    createdClient: "{API_KEY}"
                    updatedUser: string@AdobeID
                    imsOrg: "{IMS_ORG}"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "400003"
                    message: Description of error.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "403000"
                    message: Description of error.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 404
                    title: NotFoundError
                    detail: Description of error.
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
    post:
      security:
        - Bearer:
            []
      summary: Create an extension to the specified schema.
      description: <p>To express non-standard data that is unique to an organization, IMS
        Orgs may define extensions to standard schemas. Creating an extension is
        done by issuing a POST request to /xdms/{id}/_customer/{extensionNS},
        where {id} is the "namespace/objectName" of the schema being extending
        and {extensionNS} is the customer-defined "extension namespace" in which
        the custom fields will appear.</p><br/><p>Extensions are unique to each
        IMS Org, meaning they are not visible to other organizations. Individual
        IMS Orgs can create multiple "extension namespaces" on a single schema
        (e.g. "web" and "retail").</p><br/><p>The header
        'Content-Type:application/json' must be included in the request, and the
        request body must include all fields being
        defined.</p><br/><p><strong>Sample Request:</strong></p><br/><pre>curl
        -X POST \
        <br/>  https://platform.adobe.io/data/foundation/catalog/xdms/content/person/_customer/customer/retail
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        <br/>  -H 'content-type:application/json' \ <br/>  -d '{
        <br/>        "title":"Retail
        Fields",<br/>        "type":"object",<br/>        "description":"Custom
        fields for Retail division.",<br/>        "properties":{
        <br/>          "homeStoreId":{ <br/>            "title":"Home Store
        Id",<br/>            "type":"string",
        <br/>            "description":"Unique ID of the home
        store."<br/>           }, <br/>          "loyaltyMember":{
        <br/>            "title":"Loyalty Program Member",
        <br/>            "type":"boolean",
        <br/>            "default":false,<br/>            "description":"Is this
        individual a member of the Loyalty Program?"
        <br/>           }<br/>         } <br/>       }' </pre><br/><p>The
        response to this request is an array containing a single path to the
        newly created schema extension. See example in the Response section
        below.</p><br/><p>More information regarding how to use the Schema
        Registry API is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      operationId: post_extension_to_object
      requestBody:
        $ref: "#/components/requestBodies/xdmExtensionRequest"
      responses:
        "201":
          description: Returns the path to the newly created extension.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                response:
                  value:
                    - "@/xdms/context/person/_customer/retail"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "400003"
                    message: Description of error.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "403000"
                    message: Description of error.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 404
                    title: NotFoundError
                    detail: Description of error.
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
    put:
      security:
        - Bearer:
            []
      summary: Create or update a specific extension to the specified schema.
      description: <p>To express non-standard data that is unique to an organization, IMS
        Orgs may define extensions to standard schemas. These extensions can be
        created and/or updated by issuing a PUT request to
        /xdms/{id}/_customer/{extensionNS}, where {id} is the
        "namespace/objectName" of the schema being extending and {extensionNS}
        is the customer-defined "extension namespace" in which the custom fields
        appear.</p><br/><p>Extensions are unique to each IMS Org, meaning they
        are not visible to other organizations. Individual IMS Orgs can create
        multiple "extension namespaces" on a single schema (e.g. "web" and
        "retail").</p><br/><p><strong>Notes for Updating
        Extensions:</strong></p><br/><p>A PUT request is essentially
        <em>re-writing</em> the extension. Therefore, the payload of the PUT
        request must include ALL fields (old and new) that are to be included in
        the schema extension. It is recommended to view (GET) the extension
        first to see the fields that are currently in the extension, then update
        (PUT) the extension with all fields (those previously defined and those
        being added) in the request body.</p><br/><p>The header
        'Content-Type:application/json' must be included in the request, and the
        request body must include all fields (old and new) being
        included.</p><br/><p><strong>Sample Request:</strong></p><br/><pre>curl
        -X PUT \
        <br/>  https://platform.adobe.io/data/foundation/catalog/xdms/context/person/_customer/customer/retail
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        <br/>  -H 'content-type:application/json' \ <br/>  -d '{
        <br/>        "title":"Retail
        Fields",<br/>        "type":"object",<br/>        "description":"Custom
        fields for Retail division.",<br/>        "properties":{
        <br/>          "homeStoreId":{ <br/>            "title":"Home Store
        Id",<br/>            "type":"string",
        <br/>            "description":"Unique ID of the home
        store."<br/>           }, <br/>          "loyaltyMember":{
        <br/>            "title":"Loyalty Program Member",
        <br/>            "type":"boolean",
        <br/>            "default":false,<br/>            "description:"Is this
        individual a member of the Loyalty Program?"
        <br/>           },<br/>          "loyaltyJoinDate":{<br/>            "title":"Loyalty
        Program Join
        Date",<br/>            "type":"string",<br/>            "format":"date",<br/>           "description":"Date
        individual joined the Loyalty Program."<br/>           }<br/>         }
        <br/>       }' </pre><br/><p>The response to this request is an array
        containing a single path to the created or updated schema extension. See
        example in the Response section below.</p><br/><p>More information
        regarding how to use the Schema Registry API is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      operationId: create_or_update_extension_to_object
      requestBody:
        $ref: "#/components/requestBodies/xdmExtensionRequest"
      responses:
        "200":
          description: Returns the path to the updated extension.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                response:
                  value:
                    - "@/xdms/context/person/_customer/customer/retail"
        "201":
          description: Returns the path to the newly created extension.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                response:
                  value:
                    - "@/xdms/context/person/_customer/customer/retail"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "400003"
                    message: Description of error.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "403000"
                    message: Description of error.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 404
                    title: NotFoundError
                    detail: Description of error.
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
    delete:
      security:
        - Bearer:
            []
      summary: Remove customer-defined extension.
      description: <p>An IMS Org is able to remove an extension that it has defined by
        issuing a DELETE request to /xdms/{id}/_customer/{extensionNS}, where
        {id} is the "namespace/objectName" of the schema on which the extension
        was defined. <strong>This action cannot be
        undone.</strong></p><br/><p>Platform does not support breaking changes,
        therefore deleting extensions is not recommended and should only be done
        if absolutely necessary.</p><br/><p><strong>Sample
        Request:</strong></p><br/><pre>curl -X DELETE \
        <br/>  https://platform.adobe.io/data/foundation/catalog/xdms/context/person/_customer/retail
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        <br/>   </pre><br/><p>The response to this request is an array
        containing a single path to the deleted extension. See example in the
        Response section below.</p><br/><p>More information regarding how to use
        the Schema Registry API is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      operationId: remove_customer_extension
      responses:
        "200":
          description: Returns the path to the deleted extension.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                response:
                  value:
                    - "@/xdms/context/person/_customer/retail"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "400003"
                    message: Description of error.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    error_code: "403000"
                    message: Description of error.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 404
                    title: NotFoundError
                    detail: Description of error.
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
  /descriptors:
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
    get:
      security:
        - Bearer:
            []
      summary: Return a list of every {descriptorId} within the organization, organized
        by type.
      description: <p>A single GET request returns a list of all descriptors within the
        organization.</p><br/><p><strong>Sample
        Request:</strong></p><br/><pre>curl -X GET \
        <br/>  https://platform.adobe.io/data/foundation/catalog/descriptors
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        </pre><br/><p>If descriptors exist, the response is an array of objects
        with one object for each "descriptorType" the organization has defined
        (i.e. if there are no descriptors with a "descriptorType" of "schema",
        there would not be a "descriptorType":"schema" object). The
        "descriptors" array inside each object then lists the paths to the
        individual descriptors of that type. The descriptors are shown in the
        format "@/descriptors/{descriptorId}". See example in the Response
        section below.</p><br/><p><strong>Query
        Parameters:</strong><br/><br/>The GET request can be refined using query
        parameter filters. Supported filters include descriptorType,
        sourceSchema, and destSchema.</p><br/><pre>GET
        /descriptors?descriptorType=string&sourceSchema=directory/schema&destSchema=directory/schema2<br/><br/>GET
        /descriptors?descriptorType=relationship<br/>GET
        /descriptors?sourceSchema=_customer/web/flights<br/>GET
        /descriptors?destSchema=context/person<br/>GET
        /descriptors?type=relationship&sourceSchema=_customer/web/flights&destSchema=context/person</pre><br/><p>More
        information about working with Schema Descriptors is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md#schemadescriptors"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      operationId: get_all_schema_descriptors
      parameters:
        - $ref: "#/components/parameters/descriptorType"
        - $ref: "#/components/parameters/sourceSchema"
        - $ref: "#/components/parameters/destSchema"
      responses:
        "200":
          description: Returns a list of all existing descriptors, separated by type.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmDescriptor"
              examples:
                response:
                  value:
                    - descriptorType: relationship
                      descriptors:
                        - "@/descriptors/b5970193cb7050c1f381e02c0433c5525bf6b6\
                          9d"
                        - "@/descriptors/b79fde8af13d60948e7be9197283f56e123c58\
                          de"
                    - descriptorType: schema
                      descriptors:
                        - "@/descriptors/061fc9ac5e2ac791bb664eb1ad1503bd50e96a\
                          d6"
                        - "@/descriptors/ecef7db8dc0034b9a53179ad41bca4e98d0883\
                          88"
                    - descriptorType: updatePolicy
                      descriptors:
                        - "@/descriptors/3875cc1927e746e496cc2206f24e1567f46d7f\
                          b5"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmDescriptor"
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 404
                    title: NotFoundError
                    detail: Error detail here.
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
    post:
      security:
        - Bearer:
            []
      summary: Create a new descriptor. Required fields in payload vary based on @type.
      description: <p>To create a new descriptor, issue a POST request to /descriptors with
        a payload that includes all of the required fields. Required fields vary
        by @type specified, with select descriptor types (e.g.
        "xdm:updateMerge") requiring two separate calls to define
        them.</p><br/><p>Details on descriptor types, including code samples,
        are available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md#descriptor-types"
        target="_blank">Descriptor Types</a> table in the Schema Registry
        Developer Guide.</p><br/><p><strong>Sample
        Request:</strong></p><br/><pre>curl -X POST \
        <br/>  https://platform.adobe.io/data/foundation/catalog/descriptors
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'Content-Type:application/json' \ <br/>  -H 'x-api-key:{API_KEY}' \
        <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \ <br/>  -d '{
        <br/>    "@type":"xdm:descriptorPrimaryKey",<br/>    "xdm:sourceSchema":"_customer/web/flights",
        <br/>    "xdm:sourceProperty":"/flightId" <br/>  }'</pre><br/><p>The
        POST request response is an object containing the {descriptorId} of the
        new descriptor. See Response section below.</p><p><br/><strong>Available
        Descriptor @type
        Values:</strong></p><br/><pre>xdm:descriptorPrimaryKey<br/>xdm:descriptorOneToOne<br/>xdm:descriptorOneToMany<br/>xdm:descriptorManyToMany<br/>xdm:updatePolicy</pre><br/><p>More
        information about working with Schema Descriptors is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md#schemadescriptors"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      operationId: post_schema_descriptor
      requestBody:
        $ref: "#/components/requestBodies/xdmDescriptor"
      responses:
        "201":
          description: Returns newly created {descriptorId} in the response body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmDescriptor"
              examples:
                response:
                  value:
                    "@id": 061fc9ac5e2ac791bb664eb1ad1503bd50e96ad6
        "400":
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmDescriptor"
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 400
                    title: Error Title
                    detail: A description of the error appears here.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmDescriptor"
              examples:
                response:
                  value:
                    errors:
                      status: "403"
                      code: error-code-here
                      title: Error Title
                      meta:
                        request_id: 8Z4eT23agFSKtKZlDEloDwUeYW2oAVwR
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
  "/descriptors/{descriptorId}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/descriptorId"
    get:
      security:
        - Bearer:
            []
      summary: Return a specific descriptor using its {descriptorId}.
      description: <p>Details related to individual descriptors can be viewed in JSON
        format by issuing a GET request to
        /descriptors/{descriptorId}.</p><br/><p><strong>Sample
        Request:</strong></p><br/><pre>curl -X GET \
        <br/>  https://platform.adobe.io/data/foundation/catalog/descriptors/061fc9ac5e2ac791bb664eb1ad1503bd50e96ad6
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        </pre><br/><p>This request returns an object containing the descriptor
        and associated metadata. See example in Response section
        below.<br/><br/>More information about working with Schema Descriptors
        is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md#schemadescriptors"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      operationId: get_schema_descriptor
      responses:
        "200":
          description: Returns individual descriptor details in JSON format.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmDescriptor"
              examples:
                response:
                  value:
                    "@type": xdm:descriptorPrimaryKey
                    xdm:sourceSchema: _customer/web/flights
                    xdm:sourceProperty: /flightId
                    descriptorType: schema
                    descriptorId: 061fc9ac5e2ac791bb664eb1ad1503bd50e96ad6
                    version: "1"
                    created: 1537219107919
                    updated: 1537220008646
                    createdClient: "{API_KEY}"
                    updatedUser: string@AdobeID
                    imsOrg: "{IMS_ORG}"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmDescriptor"
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 404
                    title: NotFoundError
                    detail: Descriptor object not found
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
    put:
      security:
        - Bearer:
            []
      summary: Update individual descriptor. Required fields in payload vary based on
        @type.
      description: <p>Updating an existing descriptor is done through a PUT request to the
        {descriptorId} of the descriptor being updated.<br/><br/>This action is
        <em>re-writing</em> the existing descriptor, therefore the payload must
        include all necessary descriptor fields in order to ensure the
        descriptor is updated correctly.</p><br/><p><strong>Sample
        Request:</strong></p><br/><pre>curl -X PUT \
        <br/>  https://platform.adobe.io/data/foundation/catalog/descriptors/061fc9ac5e2ac791bb664eb1ad1503bd50e96ad6
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'Content-Type:application/json' \ <br/>  -H 'x-api-key:{API_KEY}' \
        <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \ <br/>  -d '{
        <br/>    "@type":"xdm:descriptorPrimaryKey",<br/>    "xdm:sourceSchema":"_customer/web/flights",
        <br/>    "xdm:sourceProperty":"/flightNumber" <br/>  }'</pre><br/><p>A
        successful PUT request will return the {descriptorId} of the updated
        descriptor. This should be the same as the {descriptorId} used in the
        request. See example in the Response section below.</p><br/><p>More
        information about working with Schema Descriptors is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md#schemadescriptors"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      operationId: put_schema_descriptor
      requestBody:
        $ref: "#/components/requestBodies/xdmDescriptor"
      responses:
        "201":
          description: Returns {descriptorId} in the response body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmDescriptor"
              examples:
                response:
                  value:
                    "@id": 061fc9ac5e2ac791bb664eb1ad1503bd50e96ad6
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmDescriptor"
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 400
                    title: BadRequestError
                    detail: A description of the error appears here.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmDescriptor"
              examples:
                response:
                  value:
                    error_code: 403000
                    message: A description of the error appears here.
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
    delete:
      security:
        - Bearer:
            []
      summary: Remove descriptor using its {descriptorId}.
      description: <p>Removing an existing descriptor is done through a DELETE request to
        the {descriptorId} of the descriptor being
        removed.</p><br/><p><strong>Sample Request:</strong></p><br/><pre>curl
        -X DELETE \
        <br/>  https://platform.adobe.io/data/foundation/catalog/descriptors/061fc9ac5e2ac791bb664eb1ad1503bd50e96ad6
        \  <br/>  -H 'Authorization:Bearer {ACCESS_TOKEN}' \ <br/>  -H
        'x-api-key:{API_KEY}' \ <br/>  -H 'x-gw-ims-org-id:{IMS_ORG}' \
        </pre><br/><p>There is no response body for a DELETE request. A
        successful deletion will return HTTP Status Code 204 (No-content). See
        example in Response section below.<br/><br/>More information about
        working with Schema Descriptors is available in the <a
        href="https://www.adobe.io/apis/cloudplatform/dataservices/xdm/xdmservices.html#!api-specification/markdown/narrative/technical_overview/schema_registry/acp_schema_registry.md#schemadescriptors"
        target="_blank">Schema Registry Developer Guide</a>.</p>
      operationId: remove_xdm_descriptor
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmDescriptor"
              examples:
                response:
                  value:
                    error_code: 403000
                    message: A description of the error appears here.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/xdmDescriptor"
              examples:
                response:
                  value:
                    type: /placeholder/type/uri
                    status: 404
                    title: NotFoundError
                    detail: Descriptor object not found.
        "500":
          description: Internal Server Error
        default:
          description: Unexpected Error
  "/tags/{tagNamespace}":
    parameters:
      - $ref: "#/components/parameters/x-api-key"
      - $ref: "#/components/parameters/accept-encoding"
      - $ref: "#/components/parameters/x-gw-ims-org-id"
      - $ref: "#/components/parameters/tagNamespace"
      - $ref: "#/components/parameters/tags"
      - $ref: "#/components/parameters/objectType"
    get:
      security:
        - Bearer:
            []
      summary: This API allows retrieving aggregated values for all tags within an IMS
        org for given tagNameSpace.
      operationId: get_tags
      responses:
        "200":
          description: Returns aggregated tagValues for given namespace.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tagsResponse"
              examples:
                response:
                  value:
                    objectType:
                      datasets:
                        - "@/DataSet/5b20017aa492bbd30425e21b"
                        - "@/DataSet/5b20451bf4c5e1f6fad006f9"
                        - "@/DataSet/5b20451cf4c5e1f6fad006fb"
                    adobe/pqs/databases:
                      - baz
                      - bat
                      - foo
                      - bar
        "400":
          description: Bad request
        "404":
          description: not found
        "500":
          description: Internal server error
        default:
          description: Unexpected error
servers:
  - url: https://platform-int.adobe.io/data/foundation/catalog
components:
  parameters:
    schemaRef:
      name: id
      description: The schema in uri (https://ns.adobe.com/xdm/context/profile,
        https://ns.adobe.com/customer/imsOrg/extensionNS/objectName) or
        meta:altId (_xdm.context.profile, _customer.extensionNS.objectName) or
        original xdm id format (context/profile,
        _customer/extensionNS/objectName).
      required: false
      in: query
      schema:
        type: string
    properties:
      name: properties
      description: A comma separated whitelist of top-level object properties to be
        returned in the response. Used to cut down the number of properties and
        amount of data returned in the response bodies.
      in: query
      required: false
      schema:
        type: string
    orderBy:
      name: orderBy
      description: Sort parameter and direction for sorting the response. Ex.
        orderBy=asc:created,updated. This was previously called sort.
      in: query
      required: false
      schema:
        type: string
    limit:
      name: limit
      description: Limit response to a specified positive number of objects. Ex. limit=10
      in: query
      required: false
      schema:
        type: integer
    start:
      name: start
      description: Returns results from a specific offset of objects. This was previously
        called offset. Ex. start=3.
      in: query
      required: false
      schema:
        type: integer
    property:
      name: property
      description: Regex used to filter objects in the response. Ex. property=name~^test.
      in: query
      required: false
      schema:
        type: string
    tags:
      name: tags
      description: Filter response by the specified tags. Ex. tags=ns:tag,ns2:tag2
      in: query
      required: false
      schema:
        type: string
    description:
      name: description
      description: Filter by user-provided description of the account.
      required: false
      in: query
      schema:
        type: string
    version:
      name: version
      description: Filter by Semantic version of the account. Updated when the object is
        modified.
      required: false
      in: query
      schema:
        type: string
    created:
      name: created
      description: Filter by the Unix timestamp (in milliseconds) when this object was
        persisted.
      required: false
      in: query
      schema:
        type: integer
        format: int64
    createdAfter:
      name: createdAfter
      description: Exclusively filter records created after this timestamp.
      required: false
      in: query
      schema:
        type: integer
        format: int64
    createdBefore:
      name: createdBefore
      description: Exclusively filter records created before this timestamp.
      required: false
      in: query
      schema:
        type: integer
        format: int64
    updated:
      name: updated
      description: Filter by the Unix timestamp (in milliseconds) for the time of last
        modification.
      required: false
      in: query
      schema:
        type: integer
        format: int64
    createdClient:
      name: createdClient
      description: Filter by the ID of the IMS client that created this object.
      required: false
      in: query
      schema:
        type: string
    createdUser:
      name: createdUser
      description: Filter by the  ID of the user who created this object.
      required: false
      in: query
      schema:
        type: string
    updatedUser:
      name: updatedUser
      description: Filter by the  ID of the user who changed this object.
      required: false
      in: query
      schema:
        type: string
    x-gw-ims-org-id:
      name: x-gw-ims-org-id
      description: The owning IMS organization identifier.
      required: true
      in: header
      schema:
        type: string
    x-api-key:
      name: x-api-key
      description: The API key belonging to the calling client.
      required: true
      in: header
      schema:
        type: string
    x-user-token:
      name: x-user-token
      description: For calls which are proxied by catalog, the access token for the user on
        whose behalf this call is made.
      required: false
      in: header
      schema:
        type: string
    accept-encoding:
      name: accept-encoding
      description: >
        "Used to signal the intent to consume compressed response bodies.
        Supported encodings: gzip."
      required: false
      in: header
      schema:
        type: string
    descriptorId:
      name: descriptorId
      description: Descriptor ID of the descriptor object
      required: true
      in: path
      schema:
        type: string
    id:
      name: id
      description: Object ID
      required: true
      in: path
      schema:
        type: string
    if-match:
      name: if-match
      description: Set to verify the valid versions of document to be modified by matching
        the updated date.
      in: header
      schema:
        type: string
    if-none-match:
      name: if-none-match
      description: Set to verify the invalid versions of document to be modified by
        matching the updated date.
      in: header
      schema:
        type: string
    namespace:
      name: namespace
      description: Filter by the base namespace ("model" or "core").
      required: true
      in: path
      schema:
        type: string
    excludeExtension:
      name: excludeExtension
      description: Set to true to exclude extensions.
      in: query
      schema:
        type: boolean
    extensionNS:
      name: extensionNS
      description: The extension namespace.
      required: true
      in: path
      schema:
        type: string
    objectName:
      name: objectName
      description: Name of custom object.
      required: true
      in: path
      schema:
        type: string
    expansion:
      name: expansion
      description: Set to 'xdm' to expand XDM schema.
      in: query
      schema:
        type: string
    xdmVersion:
      name: xdmVersion
      description: The version of the base XDM schemas that are being requested.
      in: query
      required: false
      schema:
        type: string
    descriptorType:
      name: descriptorType
      description: Type of the descriptor objects (relationship, schema, identity) being
        requested.
      in: query
      required: false
      schema:
        type: string
    sourceSchema:
      name: sourceSchema
      description: sourceSchema defined in the descriptor objects that are being requested.
      in: query
      required: false
      schema:
        type: string
    destSchema:
      name: destSchema
      description: destSchema defined in the descriptor objects that are being requested.
      in: query
      required: false
      schema:
        type: string
    tagNamespace:
      name: tagNamespace
      description: Tag namespace or key as defined within a tag inside dataSet, batch or
        transform.
      in: path
      required: true
      schema:
        type: string
    objectType:
      name: objectType
      description: objectType or the Catalog collection name in which tags should be
        searched.
      in: query
      required: true
      schema:
        type: string
        enum:
          - dataset
          - connection
          - batch
  requestBodies:
    dataSetFileRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/dataSetFileRequest"
      description: Data set file to be posted.
      required: true
    xdmDescriptor:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/xdmDescriptor"
      description: The descriptor payload JSON that goes in the body of the request.
      required: true
    xdmExtensionRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/xdmExtensionRequest"
      description: The payload JSON that goes in the body of an XDM Extension POST request.
      required: true
    accountRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/accountRequest"
      description: Account to be posted.
      required: true
    connectionRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/connectionRequest"
      description: Connection to be posted.
      required: true
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    accountRequest:
      type: object
      properties:
        connector:
          type: string
          description: The ID for the Connector this Account params was created from.
        description:
          type: string
          description: The user-provided description of the account.
        params:
          type: object
          description: Keyed list of parameters used in account. The validation for these
            parameters is done based on settings in accountParams.
          properties:
            {}
      required:
        - connector
    accountPatchRequest:
      type: object
      properties:
        connector:
          type: string
          description: The ID for the Connector this Account params was created from.
        description:
          type: string
          description: The user-provided description of the account.
        params:
          type: object
          description: Keyed list of parameters used in account. The validation for these
            parameters is done based on settings in accountParams.
          properties:
            {}
    accountResponse:
      type: object
      properties:
        connector:
          type: string
          description: The ID for the Connector this Account params was created from.
        description:
          type: string
          description: The user-provided description of the account.
        version:
          type: string
          description: The Semantic version of the account. Updated when the Account is
            modified.
          readOnly: true
        created:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) when this Account was persisted.
          readOnly: true
        updated:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) for the time of last
            modification.
          readOnly: true
        createdClient:
          type: string
          description: The ID of the IMS client that created this Account.
          readOnly: true
        createdUser:
          type: string
          description: The ID of the user who created this object.
          readOnly: true
        updatedUser:
          type: string
          description: The ID of the user who last updated this object.
          readOnly: true
        imsOrg:
          type: string
          description: The owning IMS organization identifier.
        params:
          type: object
          description: Keyed list of parameters used in account. The validation for these
            parameters is done based on settings in accountParams.
          properties:
            {}
    availableDates:
      description: Describes what date range of data is available in the Batch. Null if
        dates aren't relevant for data related to this Batch.
      properties:
        startDate:
          type: integer
          format: int64
          description: The Unix timestamp (in seconds) for the oldest data available in
            this Batch.
        endDate:
          type: integer
          format: int64
          description: The Unix timestamp (in seconds) for the most recent data available
            in this Batch.
    batchRequest:
      type: object
      properties:
        externalId:
          type: string
          description: An externally generated identifier for this batch.
          readOnly: true
        started:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) when the Batch processing
            action was started.
        completed:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) when the Batch processing
            action was completed. Completed - Started should yield the total
            processing time.
        replay:
          type: object
          description: Indicates that a batch was replayed or restated.
          properties:
            predecessors:
              type: array
              items:
                type: string
                description: One or more Batch Identifiers that this replay is replacing.
            reason:
              type: string
              description: An optional commentary for the requester to describe the purpose
                for the replay (e.g. deletion of privacy data, fix, compaction,
                etc..).
        status:
          type: string
          description: The current (mutable) status of this Batch.
          enum:
            - processing
            - success
            - failure
            - queued
            - retrying
            - stalled
            - aborted
            - abandoned
            - inactive
            - failed
            - loading
            - loaded
            - staged
            - active
            - staging
            - deleted
        recordCount:
          type: integer
          format: int64
          description: The total number of data records (rows/documents) processed in this
            Batch.
        failedRecordCount:
          type: integer
          format: int64
          description: The number of records that could not be processed in this Batch.
        errors:
          type: array
          description: ""
          items:
            $ref: "#/components/schemas/errors"
        size:
          type: integer
          format: int64
          description: Number of bytes processed in this Batch.
        availableDates:
          type: object
          description: Describes what date range of data is available in the Batch. Null if
            dates aren't relevant for data related to this Batch.
          properties:
            startDate:
              type: integer
              format: int64
              description: The Unix timestamp (in seconds) for the oldest data available in
                this Batch.
            endDate:
              type: integer
              format: int64
              description: The Unix timestamp (in seconds) for the most recent data
                available in this Batch.
        relatedObjects:
          type: array
          description: List of associated objects for this Batch, such as dataSets,
            connections, dataSetView, dataSetFiles etc.
          items:
            $ref: "#/components/schemas/relatedObjects"
        metrics:
          type: object
          description: Contains metrics related to this Batch.  Metric names are determined
            by the producer of the object since each Batch may want to record
            metrics that are relevant to the process
        tags:
          type: object
          description: Tags are values associated with a particular object,  these are
            generally used by external systems for marking an object in a way
            that it understands.  Normally tags are not used for internal
            Catalog business logic
          additionalProperties:
            type: array
            items:
              type: string
        inputFormat:
          $ref: "#/components/schemas/inputFormat"
      required:
        - status
    batchPatchRequest:
      type: object
      properties:
        externalId:
          type: string
          description: An externally generated identifier for this batch.
          readOnly: true
        started:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) when the Batch processing
            action was started.
        completed:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) when the Batch processing
            action was completed. Completed - Started should yield the total
            processing time.
        replay:
          type: object
          description: Indicates that a batch was replayed or restated.
          properties:
            predecessors:
              type: array
              items:
                type: string
                description: One or more Batch Identifiers that this replay is replacing.
            reason:
              type: string
              description: An optional commentary for the requester to describe the purpose
                for the replay (e.g. deletion of privacy data, fix, compaction,
                etc..).
        status:
          type: string
          description: The current (mutable) status of this Batch.
          enum:
            - processing
            - success
            - failure
            - queued
            - retrying
            - stalled
            - aborted
            - abandoned
            - inactive
            - failed
            - loading
            - loaded
            - staged
            - active
            - staging
            - deleted
        recordCount:
          type: integer
          format: int64
          description: The total number of data records (rows/documents) processed in this
            Batch.
        failedRecordCount:
          type: integer
          format: int64
          description: The number of records that could not be processed in this Batch.
        errors:
          type: array
          description: ""
          items:
            $ref: "#/components/schemas/errors"
        size:
          type: integer
          format: int64
          description: Number of bytes processed in this Batch.
        availableDates:
          type: object
          description: Describes what date range of data is available in the Batch. Null if
            dates aren't relevant for data related to this Batch.
          properties:
            startDate:
              type: integer
              format: int64
              description: The Unix timestamp (in seconds) for the oldest data available in
                this Batch.
            endDate:
              type: integer
              format: int64
              description: The Unix timestamp (in seconds) for the most recent data
                available in this Batch.
        relatedObjects:
          type: array
          description: List of associated objects for this Batch, such as dataSets,
            connections, dataSetView, dataSetFiles etc.
          items:
            $ref: "#/components/schemas/relatedObjects"
        metrics:
          type: object
          description: Contains metrics related to this Batch.  Metric names are determined
            by the producer of the object since each Batch may want to record
            metrics that are relevant to the process
        tags:
          type: object
          description: Tags are values associated with a particular object,  these are
            generally used by external systems for marking an object in a way
            that it understands.  Normally tags are not used for internal
            Catalog business logic
          additionalProperties:
            type: array
            items:
              type: string
        inputFormat:
          $ref: "#/components/schemas/inputFormat"
    inputFormat:
      type: object
      description: Metadata describing the INGEST format of the data being loaded (e.g.
        Parquet, CSV, JSON).
      properties:
        format:
          description: The file format for data being submitted in the Batch.
          enum:
            - csv
            - parquet
            - json
        delimiter:
          description: Character used to separate fields.
          type: string
        quote:
          description: Character used to quote fields that contains spaces, tabs, and/or
            delimiter characters.
          type: string
        escape:
          description: Character used to escape other meta-characters.
          type: string
        nullMarker:
          description: Character/string used to indicate a null value. Any value matching
            this string will be set as nulls in Data Lake.
          type: string
        header:
          description: True if input files are expected to have a header row.
          type: string
        charset:
          description: The character encoding of the input files.
          enum:
            - US-ASCII
            - UTF-8
            - ISO-8859-1
    batchResponse:
      type: object
      properties:
        imsOrg:
          type: string
          description: The owning IMS organization identifier.
        created:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) when this Batch was persisted.
          readOnly: true
        createdClient:
          type: string
          description: The ID of the IMS client that created this Batch.
          readOnly: true
        createdUser:
          type: string
          description: The ID of the user who created this object.
          readOnly: true
        updatedUser:
          type: string
          description: The ID of the user who changed this object.
          readOnly: true
        updated:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) of last modification.
          readOnly: true
        externalId:
          type: string
          description: An externally generated identifier for this batch.
          readOnly: true
        started:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) when the Batch processing
            action was started.
        completed:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) when the Batch processing
            action was completed. Completed - Started should yield the total
            processing time.
        replay:
          type: object
          description: Indicates that a batch was replayed or restated.
          properties:
            predecessors:
              type: array
              items:
                type: string
                description: One or more Batch Identifiers that this replay is replacing.
            reason:
              type: string
              description: An optional commentary for the requester to describe the purpose
                for the replay (e.g. deletion of privacy data, fix, compaction,
                etc..).
        status:
          type: string
          description: The current (mutable) status of this Batch.
          enum:
            - processing
            - success
            - failure
            - queued
            - retrying
            - stalled
            - aborted
            - abandoned
            - inactive
            - failed
            - loading
            - loaded
            - staged
            - active
            - staging
            - deleted
        failedBatchLocation:
          type: string
          description: When a batch status is failed, the URI at which to retrieve the batch
        recordCount:
          type: integer
          format: int64
          description: The total number of data records (rows/documents) processed in this
            Batch.
        failedRecordCount:
          type: integer
          format: int64
          description: The number of records that could not be processed in this Batch.
        errors:
          type: array
          description: ""
          items:
            $ref: "#/components/schemas/errors"
        size:
          type: integer
          format: int64
          description: Number of bytes processed in this Batch.
        version:
          type: string
          description: The Semantic version of the Batch. Updated when the Batch is
            modified.
          readOnly: true
        availableDates:
          type: object
          description: Describes what date range of data is available in the Batch. Null if
            dates aren't relevant for data related to this Batch.
          properties:
            startDate:
              type: integer
              format: int64
              description: The Unix timestamp (in seconds) for the oldest data available in
                this Batch.
            endDate:
              type: integer
              format: int64
              description: The Unix timestamp (in seconds) for the most recent data
                available in this Batch.
        relatedObjects:
          type: array
          description: List of associated objects for this Batch, such as dataSets,
            connections, dataSetView, dataSetFiles etc.
          items:
            $ref: "#/components/schemas/relatedObjects"
        metrics:
          type: object
          description: Contains metrics related to this Batch.  Metric names are determined
            by the producer of the object since each Batch may want to record
            metrics that are relevant to the process
        tags:
          type: object
          description: Tags are values associated with a particular object,  these are
            generally used by external systems for marking an object in a way
            that it understands.  Normally tags are not used for internal
            Catalog business logic
          additionalProperties:
            type: array
            items:
              type: string
        inputFormat:
          $ref: "#/components/schemas/inputFormat"
    connectionRequest:
      type: object
      properties:
        connector:
          type: string
          description: The ID for the Connector this Connection was created from.
        parentConnectionId:
          type: string
          description: Used in cases where global/shared data is managed by this
            connection. The parent connection performs the ETL/Mapping jobs, and
            this child connection represents a customer's membership and
            visibility into the parent.
        name:
          type: string
          description: The user-facing name of this Connection.
        description:
          type: string
          description: The user-provided description of the Connection.
        enabled:
          type: boolean
          description: Indicates the status of the Connection. Should be interpreted as
            disabled or suspended when set to false.
        attributes:
          type: object
          description: These are arbitrary key/value pairs related to this Connection.
          properties:
            {}
        dependencies:
          type: array
          items:
            type: string
        imsOrg:
          type: string
          description: The owning IMS organization identifier.
        contacts:
          type: array
          description: A list of persons to be contacts for this connection. One should be
            flagged as the primary contact/owner. This list is not meant to
            reflect roles or permissions, but a communication channel for
            operations related to this connection.
          items:
            $ref: "#/components/schemas/contacts"
        ingestStart:
          type: string
          description: Suggested date/time to start ingesting.
        frequency:
          type: object
          description: The frequency in which the data should be gathered into the
            platform. Specified either in CRONTAB format for recurring jobs or
            live=true for streaming data sources. The userEditable field is
            inherited from the parent connector.
          properties:
            userEditable:
              type: string
              description: If set to never, the user should not be allowed to adjust the
                frequency for connections created of this connection.
              enum:
                - minute
                - hour
                - day
                - month
                - week
                - never
            month:
              type: string
              description: Crontab month entry.
            day:
              type: string
              description: Crontab day entry.
            dayOfWeek:
              type: string
              description: Crontab weekday entry.
            hour:
              type: string
              description: Crontab hour entry.
            minute:
              type: string
              description: Crontab minute entry.
            timezone:
              type: string
              description: "The timezone (ie: Europe/London)."
            live:
              type: boolean
              description: Set to true if the incoming data streams in live.
        accountId:
          type: string
          description: Foreign key to the account where the credentials and related fields
            of the connector and connection combination is stored.
        ingestParams:
          type: object
          description: Keyed list of parameters used in this connection to connect to a
            related ingest job. These params are typically persisted after the
            connection's ingest mechanism has been created, and they hold
            identifiers and configuration information related to tying this
            connection to objects in the foreign ingest systems.
          properties:
            {}
        statsCache:
          type: object
          description: Cached statistics for this connection. Not to be used for
            transactionally sensitive workflows, as this may be outdated or
            incorrect at times. These values cannot be submitted to Catalog.
          properties:
            earliestAvailableData:
              type: integer
              format: int64
              description: Unix timestamp indicating the earliest start date of the oldest
                DataSetFile related to this connection.
            latestAvailableData:
              type: integer
              format: int64
              description: Unix timestamp indicating the latest end date of the newest
                DataSetFile related to this connection.
            lastSuccess:
              type: integer
              format: int64
              description: Unix timestamp indicating the updated date of the latest
                successful batch related to this connection.
            recentFailure:
              type: integer
              format: int64
              description: Unix timestamp indicating the updated date of the last failed
                batch within the last week.
        tags:
          type: object
          description: Tags are values associated with a particular object,  these are
            generally used by external systems for marking an object in a way
            that it understands.  Normally tags are not used for internal
            Catalog business logic
          additionalProperties:
            type: array
            items:
              type: string
        dule:
          type: object
          description: DULE labels.
          properties:
            contracts:
              type: array
              description: What Contractual Considerations, if any, apply to this data?
              items:
                enum:
                  - C1
                  - C2
                  - C3
                  - C4
                  - C5
                  - C6
                  - C7
                  - C8
                  - C9
                  - None
                type: string
            identifiability:
              type: array
              description: Should this data be treated as Indirectly Identifiable Data or
                Directly Identifiable Data? (What is the level of
                Identifiability?)
              items:
                enum:
                  - I1
                  - I2
                type: string
            loginState:
              type: array
              description: What is the Log-in State?
              items:
                enum:
                  - Identified
                  - Incognito
                  - Ambiguous
                  - Not Provided
                type: string
            specialTypes:
              type: array
              description: Is this a special data type? (Relative to a regulated industry,
                or distinct regulatory rules, e.g. GDPR Special data, health
                data, or Financial data)
              items:
                enum:
                  - S1
                  - S2
                type: string
            other:
              type: string
              description: Other information that may govern the use of this data.
      required:
        - connector
        - name
        - enabled
    connectionPatchRequest:
      type: object
      properties:
        connector:
          type: string
          description: The ID for the Connector this Connection was created from.
        parentConnectionId:
          type: string
          description: Used in cases where global/shared data is managed by this
            connection. The parent connection performs the ETL/Mapping jobs, and
            this child connection represents a customer's membership and
            visibility into the parent.
        name:
          type: string
          description: The user-facing name of this Connection.
        description:
          type: string
          description: The user-provided description of the Connection.
        enabled:
          type: boolean
          description: Indicates the status of the Connection. Should be interpreted as
            disabled or suspended when set to false.
        attributes:
          type: object
          description: These are arbitrary key/value pairs related to this Connection.
          properties:
            {}
        dependencies:
          type: array
          items:
            type: string
        imsOrg:
          type: string
          description: The owning IMS organization identifier.
        contacts:
          type: array
          description: A list of persons to be contacts for this connection. One should be
            flagged as the primary contact/owner. This list is not meant to
            reflect roles or permissions, but a communication channel for
            operations related to this connection.
          items:
            $ref: "#/components/schemas/contacts"
        ingestStart:
          type: string
          description: Suggested date/time to start ingesting.
        frequency:
          type: object
          description: The frequency in which the data should be gathered into the
            platform. Specified either in CRONTAB format for recurring jobs or
            live=true for streaming data sources. The userEditable field is
            inherited from the parent connector.
          properties:
            userEditable:
              type: string
              description: If set to never, the user should not be allowed to adjust the
                frequency for connections created of this connection.
              enum:
                - minute
                - hour
                - day
                - month
                - week
                - never
            month:
              type: string
              description: Crontab month entry.
            day:
              type: string
              description: Crontab day entry.
            dayOfWeek:
              type: string
              description: Crontab weekday entry.
            hour:
              type: string
              description: Crontab hour entry.
            minute:
              type: string
              description: Crontab minute entry.
            timezone:
              type: string
              description: "The timezone (ie: Europe/London)."
            live:
              type: boolean
              description: Set to true if the incoming data streams in live.
        accountId:
          type: string
          description: Foreign key to the account where the credentials and related fields
            of the connector and connection combination is stored.
        ingestParams:
          type: object
          description: Keyed list of parameters used in this connection to connect to a
            related ingest job. These params are typically persisted after the
            connection's ingest mechanism has been created, and they hold
            identifiers and configuration information related to tying this
            connection to objects in the foreign ingest systems.
          properties:
            {}
        statsCache:
          type: object
          description: Cached statistics for this connection. Not to be used for
            transactionally sensitive workflows, as this may be outdated or
            incorrect at times. These values cannot be submitted to Catalog.
          properties:
            earliestAvailableData:
              type: integer
              format: int64
              description: Unix timestamp indicating the earliest start date of the oldest
                DataSetFile related to this connection.
            latestAvailableData:
              type: integer
              format: int64
              description: Unix timestamp indicating the latest end date of the newest
                DataSetFile related to this connection.
            lastSuccess:
              type: integer
              format: int64
              description: Unix timestamp indicating the updated date of the latest
                successful batch related to this connection.
            recentFailure:
              type: integer
              format: int64
              description: Unix timestamp indicating the updated date of the last failed
                batch within the last week.
        tags:
          type: object
          description: Tags are values associated with a particular object,  these are
            generally used by external systems for marking an object in a way
            that it understands.  Normally tags are not used for internal
            Catalog business logic
          additionalProperties:
            type: array
            items:
              type: string
        dule:
          type: object
          description: DULE labels.
          properties:
            contracts:
              type: array
              description: What Contractual Considerations, if any, apply to this data?
              items:
                enum:
                  - C1
                  - C2
                  - C3
                  - C4
                  - C5
                  - C6
                  - C7
                  - C8
                  - C9
                  - None
                type: string
            identifiability:
              type: array
              description: Should this data be treated as Indirectly Identifiable Data or
                Directly Identifiable Data? (What is the level of
                Identifiability?)
              items:
                enum:
                  - I1
                  - I2
                type: string
            loginState:
              type: array
              description: What is the Log-in State?
              items:
                enum:
                  - Identified
                  - Incognito
                  - Ambiguous
                  - Not Provided
                type: string
            specialTypes:
              type: array
              description: Is this a special data type? (Relative to a regulated industry,
                or distinct regulatory rules, e.g. GDPR Special data, health
                data, or Financial data)
              items:
                enum:
                  - S1
                  - S2
                type: string
            other:
              type: string
              description: Other information that may govern the use of this data.
    largeDocumentsResponse:
      type: object
      properties:
        created:
          type: string
          description: The Unix timestamp (in milliseconds) when the largeDocument was
            persisted.
        imsOrg:
          type: string
          description: The owning IMS organization identifier.
        ttl:
          type: string
          description: The time to live associated with this object.
        objectType:
          type: string
          description: The type of object.
        jsonString:
          type: string
          description: The large object persisted.
    connectionResponse:
      type: object
      properties:
        connector:
          type: string
          description: The ID for the Connector this Connection was created from.
        parentConnectionId:
          type: string
          description: Used in cases where global/shared data is managed by this
            connection. The parent connection performs the ETL/Mapping jobs, and
            this child connection represents a customer's membership and
            visibility into the parent.
        name:
          type: string
          description: The user-facing name of this Connection.
        description:
          type: string
          description: The user-provided description of the Connection.
        enabled:
          type: boolean
          description: Indicates the status of the Connection. Should be interpreted as
            disabled or suspended when set to false.
        version:
          type: string
          description: The Semantic version of the batch. Updated when the Connection is
            modified.
          readOnly: true
        created:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) when this Connection was
            persisted.
          readOnly: true
        updated:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) for the time of last
            modification.
          readOnly: true
        createdClient:
          type: string
          description: The ID of the IMS client that created this Connection.
          readOnly: true
        createdUser:
          type: string
          description: The ID of the user who created this object.
          readOnly: true
        updatedUser:
          type: string
          description: The ID of the user who changed this object.
          readOnly: true
        attributes:
          type: object
          description: These are arbitrary key/value pairs related to this Connection.
          properties:
            {}
        dependencies:
          type: array
          description: ""
          items:
            type: string
        imsOrg:
          type: string
          description: The owning IMS organization identifier.
        contacts:
          type: array
          description: A list of persons to be contacts for this connection. One should be
            flagged as the primary contact/owner. This list is not meant to
            reflect roles or permissions, but a communication channel for
            operations related to this connection.
          items:
            $ref: "#/components/schemas/contacts"
        ingestStart:
          type: string
          description: Suggested date/time to start ingesting.
        frequency:
          type: object
          description: The frequency in which the data should be gathered into the
            platform. Specified either in CRONTAB format for recurring jobs or
            live=true for streaming data sources. The userEditable field is
            inherited from the parent connector.
          properties:
            userEditable:
              type: string
              description: If set to never, the user should not be allowed to adjust the
                frequency for connections created of this connection.
              enum:
                - minute
                - hour
                - day
                - month
                - week
                - never
            month:
              type: string
              description: Crontab month entry.
            day:
              type: string
              description: Crontab day entry.
            dayOfWeek:
              type: string
              description: Crontab weekday entry.
            hour:
              type: string
              description: Crontab hour entry.
            minute:
              type: string
              description: Crontab minute entry.
            timezone:
              type: string
              description: "The timezone (ie: Europe/London)."
            live:
              type: boolean
              description: Set to true if the incoming data streams in live.
        accountId:
          type: string
          description: Foreign key to the account where the credentials and related fields
            of the connector and connection combination is stored.
        ingestParams:
          type: object
          description: Keyed list of parameters used in this connection to connect to a
            related ingest job. These params are typically persisted after the
            connection's ingest mechanism has been created, and they hold
            identifiers and configuration information related to tying this
            connection to objects in the foreign ingest systems.
          properties:
            {}
        dataSets:
          type: string
          description: "@/connections/connectionId/dataSets"
        statsCache:
          type: object
          description: Cached statistics for this connection. Not to be used for
            transactionally sensitive workflows, as this may be outdated or
            incorrect at times. These values cannot be submitted to Catalog.
          properties:
            earliestAvailableData:
              type: integer
              format: int64
              description: Unix timestamp indicating the earliest start date of the oldest
                DataSetFile related to this connection.
            latestAvailableData:
              type: integer
              format: int64
              description: Unix timestamp indicating the latest end date of the newest
                DataSetFile related to this connection.
            lastSuccess:
              type: integer
              format: int64
              description: Unix timestamp indicating the updated date of the latest
                successful batch related to this connection.
            recentFailure:
              type: integer
              format: int64
              description: Unix timestamp indicating the updated date of the last failed
                batch within the last week.
        tags:
          type: object
          description: Tags are values associated with a particular object,  these are
            generally used by external systems for marking an object in a way
            that it understands.  Normally tags are not used for internal
            Catalog business logic
          additionalProperties:
            type: array
            items:
              type: string
        dule:
          type: object
          description: DULE labels.
          properties:
            contracts:
              type: array
              description: What Contractual Considerations, if any, apply to this data?
              items:
                enum:
                  - C1
                  - C2
                  - C3
                  - C4
                  - C5
                  - C6
                  - C7
                  - C8
                  - C9
                  - None
                type: string
            identifiability:
              type: array
              description: Should this data be treated as Indirectly Identifiable Data or
                Directly Identifiable Data? (What is the level of
                Identifiability?)
              items:
                enum:
                  - I1
                  - I2
                type: string
            loginState:
              type: array
              description: What is the Log-in State?
              items:
                enum:
                  - Identified
                  - Incognito
                  - Ambiguous
                  - Not Provided
                type: string
            specialTypes:
              type: array
              description: Is this a special data type? (Relative to a regulated industry,
                or distinct regulatory rules, e.g. GDPR Special data, health
                data, or Financial data)
              items:
                enum:
                  - S1
                  - S2
                type: string
            other:
              type: string
              description: Other information that may govern the use of this data.
    connectorResponse:
      type: object
      properties:
        version:
          type: string
          description: The Semantic version of the batch. Updated when the Connector is
            modified.
        type:
          type: string
          description: The ingest type for this Connector.
          enum:
            - batch
            - stream
        name:
          type: string
          description: Name of this Connector.
        category:
          type: string
          description: "Connectors currently have 2 categories: 1) standard: we are
            connecting to a known source with known data (ie. other companies
            data stores) or 2) custom: a generaic connector to FTP or S3 etc."
          enum:
            - standard
            - custom
        description:
          type: string
          description: Introductory text describing this connector, it's primary
            functionality, relevant data sets, etc.
        ingestStart:
          type: string
          description: Suggested date/time to start ingesting.
        frequency:
          type: object
          description: Suggested ingest frequency for Connections created from this
            Connector.
          properties:
            userEditable:
              type: string
              description: Signifies the granularity to which a user can configure the
                frequency settings. Settings representing the current
                granularity and smaller are allowed.
              enum:
                - minute
                - hour
                - day
                - month
                - week
                - never
            month:
              type: string
              description: Crontab month entry.
            day:
              type: string
              description: Crontab day entry.
            dayOfWeek:
              type: string
              description: Crontab weekday entry.
            hour:
              type: string
              description: Crontab hour entry.
            minute:
              type: string
              description: Crontab minute entry.
            timezone:
              type: string
              description: "The timezone (ie: Europe/London)."
            live:
              type: boolean
              description: Set to true if the incoming data streams in live.
        uiCreationAllowed:
          type: boolean
          description: When set to false, this connector should not be shown by the UI
            Connector Library. Essentially, the UI is not to create connectors
            of this type, but should show status related to this connector
            elsewhere.
        maxConnections:
          type: integer
          description: The maximum number of connections a customer (IMS Org) can create of
            this type.
        documents:
          type: array
          description: URLs pointing to supporting documentation for using and gaining
            value from this connector.
          items:
            $ref: "#/components/schemas/documents"
        paramsSchema:
          type: object
          description: JSON Schema used to validation service params.
          properties:
            {}
    dataSetRequest:
      type: object
      properties:
        connectorId:
          type: string
          description: Foreign key to the Connector this DataSet originates from. Template
            DataSets are tied to Connectors and not Connections. This is an
            immutable attribute and once created, it cannot be updated through
            PUT or PATCH requests.
        connectionId:
          type: string
          description: Foreign key to the Connection this DataSet originates from. This is
            an immutable attribute and once created, it cannot be updated
            through PUT or PATCH requests.
        name:
          type: string
          description: A descriptive, human-readable name for this DataSet.
        description:
          type: string
          description: A longer text description of the DataSet.
        contacts:
          type: array
          description: A list of persons to be contacts for this dataset. One should be
            flagged as the primary contact/owner. This list is not meant to
            reflect roles or permissions, but a communication channel for
            operations related to this dataset.
          items:
            $ref: "#/components/schemas/contacts"
        namespace:
          type: string
          description: One of the registered platform acronyms that identify the platform.
            This is an immutable attribute and once created, it cannot be
            updated through PUT or PATCH requests.
          enum:
            - AA
            - AAM
            - AEM
            - AC
            - AT
            - AMO
            - PT
            - AS
            - AMC
            - ACP
        state:
          type: string
          description: The state related to a dataset. Must be one of the enumerated values.
          enum:
            - DRAFT
            - ACTIVE
            - DEPRECATED
        tags:
          type: object
          description: Tags are values associated with a particular object,  these are
            generally used by external systems for marking an object in a way
            that it understands.  Normally tags are not used for internal
            Catalog business logic
          additionalProperties:
            type: array
            items:
              type: string
        dataContributors:
          type: array
          description: Describes the processes that have contributed data to this dataset
          items:
            $ref: "#/components/schemas/contributors"
        statsCache:
          type: object
          description: Cached statistics for this data set. These values cannot be
            submitted to Catalog.
          properties:
            failedRowCount:
              type: integer
              format: int64
              description: Rows that failed processing.
            rowCount:
              type: integer
              format: int64
              description: Total number of rows processed in the data set.
            startDate:
              type: integer
              format: int64
              description: Unix timestamp indicating the start date of the data set.
            endDate:
              type: integer
              format: int64
              description: Unix timestamp indicating the end date of the data set.
        lastBatchId:
          type: string
          description: ID of the last batch that modified the data set.
        lastBatchStatus:
          type: string
          enum:
            - processing
            - success
            - failure
            - queued
            - retrying
            - stalled
            - aborted
            - abandoned
            - deleted
          description: status of the last batch that modified the data set.
        lastSuccessfulBatch:
          type: string
          description: The ID of the last successful batch that has modified this data set.
        lastFailedBatch:
          type: string
          description: The ID of the last failed batch that has modified this data set.
        aspect:
          type: string
          description: Aspect represents the particular perspective or target you're after
            when viewing a dataset. Sandbox views are a version of the dataset
            that's being used to iterate towards a final ETL job definition. The
            production aspect is then used (by default).
          enum:
            - production
            - sandbox
        observableSchema:
          type: object
          description: observableSchema stores a JSON Schema object that is a valid subset
            (including the null case) of the XDM model specified by `schema`.
        editableClientIds:
          type: array
          description: Whitelisted client ids that can modify the restricted fields of this
            dataset.
          items:
            type: string
        status:
          type: string
          description: Describes the current state of the view.  If a view is not enabled,
            it should not be used by any process even when it is specified as a
            dependency. Only one view of a given aspect should be enabled at any
            time. For example, no DataSet should have more than one enabled
            production or sandbox view.
          enum:
            - enabled
            - disabled
        requestStartDate:
          type: string
          description: The oldest date and the time, when the data was last ingested
        editable:
          type: boolean
          description: Determines whether or not this DataSetView definition should be
            editable by the user.  Some documents are 'locked' and not available
            for edit.
        dependencies:
          type: array
          description: An array of dependency objects. If a DataSetView is referenced in a
            transform, data about that linkage should be found in this array.
          items:
            $ref: "#/components/schemas/dependencies"
        fields:
          type: array
          description: Ordered array of fields describing the resulting schema (output) for
            this view.
          items:
            $ref: "#/components/schemas/field"
        basePath:
          type: string
          description: Fully qualified base path for all DataSetFiles associated with this
            view. For views cached in a database (HBase or Cassandra), supply a
            templatized DSN.
          readOnly: true
        fileDescription:
          type: object
          description: Metadata describing the DataSetFiles associated with this
            DataSetView.
          properties:
            persisted:
              type: boolean
              description: Determines whether or not we are persisting the view to
                disk.  If this is false then the other fields in this object are
                redundant, but may be used for identifying old data that was
                persisted previously.
            containerFormat:
              type: string
              description: The Container format for all dataSetFiles associated with this
                view.
              enum:
                - text
                - sequence
                - parquet
            format:
              type: string
              description: The file format for all dataSetFiles associated with this view.
              enum:
                - ""
                - csv
                - text
                - parquet
                - json
                - sequencefile
            delimiters:
              type: array
              description: Characters used to separate fields.
              items:
                type: string
                maxLength: 1
            quotes:
              type: array
              description: ""
              items:
                type: string
            escapes:
              type: array
              description: ""
              items:
                type: string
            nullMarkers:
              type: array
              description: ""
              items:
                type: string
            header:
              type: boolean
              description: ""
            charset:
              type: string
              description: The character encoding of the files.
              enum:
                - US-ASCII
                - UTF-8
                - ISO-8859-1
                - ""
        partitions:
          type: array
          description: ""
          items:
            type: string
        saveStrategy:
          type: string
          description: Denotes save strategy for this dataset.
          enum:
            - append
            - overwrite
            - delta
        schema:
          type: string
          description: This is the uri for the XDM model
        schemaMetadata:
          $ref: "#/components/schemas/schemaMetadata"
        schemaRef:
          $ref: "#/components/schemas/schemaRef"
        dule:
          type: object
          description: DULE labels.
          properties:
            contracts:
              type: array
              description: What Contractual Considerations, if any, apply to this data?
              items:
                enum:
                  - C1
                  - C2
                  - C3
                  - C4
                  - C5
                  - C6
                  - C7
                  - C8
                  - C9
                  - None
                type: string
            identifiability:
              type: array
              description: Should this data be treated as Indirectly Identifiable Data or
                Directly Identifiable Data? (What is the level of
                Identifiability?)
              items:
                enum:
                  - I1
                  - I2
                type: string
            loginState:
              type: array
              description: What is the Log-in State?
              items:
                enum:
                  - Identified
                  - Incognito
                  - Ambiguous
                  - Not Provided
                type: string
            specialTypes:
              type: array
              description: Is this a special data type? (Relative to a regulated industry,
                or distinct regulatory rules, e.g. GDPR Special data, health
                data, or Financial data)
              items:
                enum:
                  - S1
                  - S2
                type: string
            persistence:
              $ref: "#/components/schemas/persistenceRequest"
            other:
              type: string
              description: Other information that may govern the use of this data.
        dataSourceId:
          type: integer
          description: The Id of the datasource. It must be unique, along with it''s name.
    dataSetResponse:
      type: object
      properties:
        version:
          type: string
          description: The Semantic version of the DataSet. Updated when the DataSet is
            modified.
          readOnly: true
        imsOrg:
          type: string
          description: The owning IMS organization identifier.
        connectorId:
          type: string
          description: Foreign key to the Connector this DataSet originates from. Template
            DataSets are tied to Connectors and not Connections.
        connectionId:
          type: string
          description: Foreign key to the Connection this DataSet originates from.
        name:
          type: string
          description: A descriptive, human-readable name for this DataSet.
        description:
          type: string
          description: A longer text description of the DataSet.
        contacts:
          type: array
          description: A list of persons to be contacts for this dataset. One should be
            flagged as the primary contact/owner. This list is not meant to
            reflect roles or permissions, but a communication channel for
            operations related to this dataset.
          items:
            $ref: "#/components/schemas/contacts"
        created:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) when this DataSet was persisted.
          readOnly: true
        updated:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) for the time of last
            modification.
          readOnly: true
        createdClient:
          type: string
          description: The ID of the IMS client that created this Batch.
          readOnly: true
        createdUser:
          type: string
          description: The ID of the user who created this object.
          readOnly: true
        editableClientIds:
          type: array
          description: Whitelisted client ids that can modify the restricted fields of this
            dataset..
          items:
            type: string
        updatedUser:
          type: string
          description: The ID of the user who changed this object.
          readOnly: true
        namespace:
          type: string
          description: One of the registered platform acronyms that identify the platform.
          enum:
            - AA
            - AAM
            - AEM
            - AC
            - AT
            - AMO
            - PT
            - AS
            - AMC
            - ACP
        state:
          type: string
          description: The state related to a dataset. Must be one of the enumerated values.
          enum:
            - DRAFT
            - ACTIVE
            - DEPRECATED
        viewId:
          type: string
          description: The ID for associated DataSet view.
        aspect:
          type: string
          description: Aspect represents the particular perspective or target you're after
            when viewing a dataset. Sandbox views are a version of the dataset
            that's being used to iterate towards a final ETL job definition. The
            production aspect is then used (by default).
          enum:
            - production
            - sandbox
        observableSchema:
          type: object
          description: observableSchema stores a JSON Schema object that is a valid subset
            (including the null case) of the XDM model specified by `schema`.
        status:
          type: string
          description: Describes the current state of the view.  If a view is not enabled,
            it should not be used by any process even when it is specified as a
            dependency. Only one view of a given aspect should be enabled at any
            time. For example, no DataSet should have more than one enabled
            production or sandbox view.
          enum:
            - enabled
            - disabled
        requestStartDate:
          type: string
          description: The oldest date and the time, when the data was last ingested
        editable:
          type: boolean
          description: Determines whether or not this DataSetView definition should be
            editable by the user.  Some documents are 'locked' and not available
            for edit.
        dependencies:
          type: array
          description: An array of dependency objects. If a DataSetView is referenced in a
            transform, data about that linkage should be found in this array.
          items:
            $ref: "#/components/schemas/dependencies"
        fields:
          type: array
          description: Ordered array of fields describing the resulting schema (output) for
            this view.
          items:
            $ref: "#/components/schemas/field"
        basePath:
          type: string
          description: Fully qualified base path for all DataSetFiles associated with this
            view. For views cached in a database (HBase or Cassandra), supply a
            templatized DSN.
          readOnly: true
        fileDescription:
          type: object
          description: Metadata describing the DataSetFiles associated with this
            DataSetView.
          properties:
            persisted:
              type: boolean
              description: Determines whether or not we are persisting the view to
                disk.  If this is false then the other fields in this object are
                redundant, but may be used for identifying old data that was
                persisted previously.
            containerFormat:
              type: string
              description: The Container format for all dataSetFiles associated with this
                view.
              enum:
                - text
                - sequence
                - parquet
            format:
              type: string
              description: The file format for all dataSetFiles associated with this view.
              enum:
                - ""
                - csv
                - text
                - parquet
                - json
                - sequencefile
            delimiters:
              type: array
              description: Characters used to separate fields.
              items:
                type: string
                maxLength: 1
            quotes:
              type: array
              description: ""
              items:
                type: string
            escapes:
              type: array
              description: ""
              items:
                type: string
            nullMarkers:
              type: array
              description: ""
              items:
                type: string
            header:
              type: boolean
              description: ""
            charset:
              type: string
              description: The character encoding of the files.
              enum:
                - US-ASCII
                - UTF-8
                - ISO-8859-1
                - ""
        partitions:
          type: array
          description: ""
          items:
            type: string
        saveStrategy:
          type: string
          description: Denotes save strategy for this dataset.
          enum:
            - append
            - overwrite
            - delta
        createdXdmSchemaVersion:
          type: string
          description: The XDM version used when the dataSet was created using schemaRef.
        schema:
          type: string
          description: This is the uri for the XDM model
        schemaMetadata:
          $ref: "#/components/schemas/schemaMetadata"
        schemaRef:
          $ref: "#/components/schemas/schemaRef"
        transforms:
          type: string
          description: Associated transforms for given dataset in following string format
            /dataSets/{dataSetId}/views/{dataSetViewId}/transforms By using
            query param 'expansion=transforms', this object can be requested as
            part of response.
        files:
          type: string
          description: Associated files for given dataset in following string format
            dataSets/{dataSetId}/views/{dataSetViewId}/files By using query
            param 'expansion=files', this object can be requested as part of
            response.
        tags:
          type: object
          description: Tags are values associated with a particular object,  these are
            generally used by external systems for marking an object in a way
            that it understands.  Normally tags are not used for internal
            Catalog business logic
          additionalProperties:
            type: array
            items:
              type: string
        dataContributors:
          type: array
          description: Describes the processes that have contributed data to this dataset
          items:
            $ref: "#/components/schemas/contributors"
        statsCache:
          type: object
          description: Cached statistics for this data set. These values cannot be
            submitted to Catalog.
          properties:
            failedRowCount:
              type: integer
              format: int64
              description: Rows that failed processing.
            rowCount:
              type: integer
              format: int64
              description: Total number of rows processed in the data set.
            startDate:
              type: integer
              format: int64
              description: Unix timestamp indicating the start date of the data set.
            endDate:
              type: integer
              format: int64
              description: Unix timestamp indicating the end date of the data set.
        lastBatchId:
          type: string
          description: ID of the last batch that modified the data set.
        lastBatchStatus:
          type: string
          enum:
            - processing
            - success
            - failure
            - queued
            - retrying
            - stalled
            - aborted
            - abandoned
            - deleted
          description: status of the last batch that modified the data set.
        lastSuccessfulBatch:
          type: string
          description: The ID of the last successful batch that has modified this data set.
        lastFailedBatch:
          type: string
          description: The ID of the last failed batch that has modified this data set.
        dule:
          type: object
          description: DULE labels.
          properties:
            contracts:
              type: array
              description: What Contractual Considerations, if any, apply to this data?
              items:
                enum:
                  - C1
                  - C2
                  - C3
                  - C4
                  - C5
                  - C6
                  - C7
                  - C8
                  - C9
                  - None
                type: string
            identifiability:
              type: array
              description: Should this data be treated as Indirectly Identifiable Data or
                Directly Identifiable Data? (What is the level of
                Identifiability?)
              items:
                enum:
                  - I1
                  - I2
                type: string
            loginState:
              type: array
              description: What is the Log-in State?
              items:
                enum:
                  - Identified
                  - Incognito
                  - Ambiguous
                  - Not Provided
                type: string
            specialTypes:
              type: array
              description: Is this a special data type? (Relative to a regulated industry,
                or distinct regulatory rules, e.g. GDPR Special data, health
                data, or Financial data)
              items:
                enum:
                  - S1
                  - S2
                type: string
            other:
              type: string
              description: Other information that may govern the use of this data.
        dataSourceId:
          type: integer
          description: The Id of the datasource. It must be unique, along with it's name.
        persistence:
          $ref: "#/components/schemas/persistenceResponse"
    dataSetViewRequest:
      type: object
      properties:
        dataSetId:
          type: string
          description: Foreign key to the owning DataSet. This attribute is immutable and
            cannot be updated using PUT or PATCH requests.
        aspect:
          type: string
          description: Aspect represents the particular perspective or target you're after
            when viewing a dataset. Sandbox views are a version of the dataset
            that's being used to iterate towards a final ETL job definition. The
            production aspect is then used (by default). This attribute is
            immutable and cannot be updated using PUT or PATCH requests.
          enum:
            - production
            - sandbox
        observableSchema:
          type: object
          description: observableSchema stores a JSON Schema object that is a valid subset
            (including the null case) of the XDM model specified by `schema`.
        schemaMetadata:
          $ref: "#/components/schemas/schemaMetadata"
        status:
          type: string
          description: Describes the current state of the view.  If a view is not enabled,
            it should not be used by any process even when it is specified as a
            dependency. Only one view of a given aspect should be enabled at any
            time. For example, no DataSet should have more than one enabled
            production or sandbox view.
          enum:
            - enabled
            - disabled
        requestStartDate:
          type: string
          description: The oldest date and the time, when the data was last ingested
        editable:
          type: boolean
          description: Determines whether or not this DataSetView definition should be
            editable by the user.  Some documents are 'locked' and not available
            for edit.
        dependencies:
          type: array
          description: An array of dependency objects. If a DataSetView is referenced in a
            transform, data about that linkage should be found in this array.
          items:
            $ref: "#/components/schemas/dependencies"
        sdsVersion:
          type: string
          description: The semantic version of the SDS this view (and it's transforms) are
            compatible with.
        fields:
          type: array
          description: Ordered array of fields describing the resulting schema (output) for
            this view. This attribute is immutable and cannot be updated using
            PUT or PATCH requests.
          items:
            $ref: "#/components/schemas/field"
        storageType:
          type: string
          description: Specifies the type of storage that applies to basePath. It is
            required only when basePath is not empty.
          enum:
            - s3
            - hdfs
            - azure-blob
        basePath:
          type: string
          description: Fully qualified base path for all DataSetFiles associated with this
            view. For views cached in a database (HBase or Cassandra), supply a
            templatized DSN.
          readOnly: true
        isCached:
          type: boolean
          description: Some DataSetViews are pre-cached in a high-speed lookup table for
            faster access, this flag indicates if that has been done.
        transforms:
          type: string
          description: Link to associated transforms in following string format
            /dataSets/{dataSetId}/views/{dataSetViewId}/transforms
        files:
          type: string
          description: Link to associated files in following string format
            /dataSets/{dataSetId}/views/{dataSetViewId}/files
        fileDescription:
          type: object
          description: Metadata describing the DataSetFiles associated with this
            DataSetView. This attribute is immutable and cannot be updated using
            PUT or PATCH requests.
          properties:
            persisted:
              type: boolean
              description: Determines whether or not we are persisting the view to
                disk.  If this is false then the other fields in this object are
                redundant, but may be used for identifying old data that was
                persisted previously.
            containerFormat:
              type: string
              description: The Container format for all dataSetFiles associated with this
                view.
              enum:
                - text
                - sequence
                - parquet
            format:
              type: string
              description: The file format for all dataSetFiles associated with this view.
              enum:
                - ""
                - csv
                - text
                - parquet
                - json
                - sequencefile
            delimiters:
              type: array
              description: Characters used to separate fields.
              items:
                type: string
                maxLength: 1
            quotes:
              type: array
              description: ""
              items:
                type: string
            escapes:
              type: array
              description: ""
              items:
                type: string
            nullMarkers:
              type: array
              description: ""
              items:
                type: string
            header:
              type: boolean
              description: ""
            charset:
              type: string
              description: The character encoding of the files.
              enum:
                - US-ASCII
                - UTF-8
                - ISO-8859-1
                - ""
        partitions:
          type: array
          description: ""
          items:
            type: string
        saveStrategy:
          type: string
          description: Denotes save strategy for this dataset. This attribute is immutable
            and cannot be updated using PUT or PATCH requests.
          enum:
            - append
            - overwrite
            - delta
        schema:
          type: string
          description: This is the uri for the XDM model. This attribute is immutable and
            cannot be updated using PUT or PATCH requests.
        schemaRef:
          $ref: "#/components/schemas/schemaRef"
        persistence:
          $ref: "#/components/schemas/persistenceRequest"
      required:
        - dataSetId
        - aspect
        - status
    dataSetViewPatchRequest:
      type: object
      properties:
        dataSetId:
          type: string
          description: Foreign key to the owning DataSet. This attribute is immutable and
            cannot be updated using PUT or PATCH requests.
        aspect:
          type: string
          description: Aspect represents the particular perspective or target you're after
            when viewing a dataset. Sandbox views are a version of the dataset
            that's being used to iterate towards a final ETL job definition. The
            production aspect is then used (by default). This attribute is
            immutable and cannot be updated using PUT or PATCH requests.
          enum:
            - production
            - sandbox
        observableSchema:
          type: object
          description: observableSchema stores a JSON Schema object that is a valid subset
            (including the null case) of the XDM model specified by `schema`.
        schemaMetadata:
          $ref: "#/components/schemas/schemaMetadata"
        status:
          type: string
          description: Describes the current state of the view.  If a view is not enabled,
            it should not be used by any process even when it is specified as a
            dependency. Only one view of a given aspect should be enabled at any
            time. For example, no DataSet should have more than one enabled
            production or sandbox view.
          enum:
            - enabled
            - disabled
        requestStartDate:
          type: string
          description: The oldest date and the time, when the data was last ingested
        editable:
          type: boolean
          description: Determines whether or not this DataSetView definition should be
            editable by the user.  Some documents are 'locked' and not available
            for edit.
        dependencies:
          type: array
          description: An array of dependency objects. If a DataSetView is referenced in a
            transform, data about that linkage should be found in this array.
          items:
            $ref: "#/components/schemas/dependencies"
        sdsVersion:
          type: string
          description: The semantic version of the SDS this view (and it's transforms) are
            compatible with.
        fields:
          type: array
          description: Ordered array of fields describing the resulting schema (output) for
            this view. This attribute is immutable and cannot be updated using
            PUT or PATCH requests.
          items:
            $ref: "#/components/schemas/field"
        storageType:
          type: string
          description: Specifies the type of storage that applies to basePath. It is
            required only when basePath is not empty.
          enum:
            - s3
            - hdfs
            - azure-blob
        basePath:
          type: string
          description: Fully qualified base path for all DataSetFiles associated with this
            view. For views cached in a database (HBase or Cassandra), supply a
            templatized DSN.
          readOnly: true
        isCached:
          type: boolean
          description: Some DataSetViews are pre-cached in a high-speed lookup table for
            faster access, this flag indicates if that has been done.
        transforms:
          type: string
          description: Link to associated transforms in following string format
            /dataSets/{dataSetId}/views/{dataSetViewId}/transforms
        files:
          type: string
          description: Link to associated files in following string format
            /dataSets/{dataSetId}/views/{dataSetViewId}/files
        fileDescription:
          type: object
          description: Metadata describing the DataSetFiles associated with this
            DataSetView. This attribute is immutable and cannot be updated using
            PUT or PATCH requests.
          properties:
            persisted:
              type: boolean
              description: Determines whether or not we are persisting the view to
                disk.  If this is false then the other fields in this object are
                redundant, but may be used for identifying old data that was
                persisted previously.
            containerFormat:
              type: string
              description: The Container format for all dataSetFiles associated with this
                view.
              enum:
                - text
                - sequence
                - parquet
            format:
              type: string
              description: The file format for all dataSetFiles associated with this view.
              enum:
                - ""
                - csv
                - text
                - parquet
                - json
                - sequencefile
            delimiters:
              type: array
              description: Characters used to separate fields.
              items:
                type: string
                maxLength: 1
            quotes:
              type: array
              description: ""
              items:
                type: string
            escapes:
              type: array
              description: ""
              items:
                type: string
            nullMarkers:
              type: array
              description: ""
              items:
                type: string
            header:
              type: boolean
              description: ""
            charset:
              type: string
              description: The character encoding of the files.
              enum:
                - US-ASCII
                - UTF-8
                - ISO-8859-1
                - ""
        partitions:
          type: array
          description: ""
          items:
            type: string
        saveStrategy:
          type: string
          description: Denotes save strategy for this dataset.This attribute is immutable
            and cannot be updated using PUT or PATCH requests.
          enum:
            - append
            - overwrite
            - delta
        schema:
          type: string
          description: This is the uri for the XDM model. This attribute is immutable and
            cannot be updated using PUT or PATCH requests.
        schemaRef:
          $ref: "#/components/schemas/schemaRef"
        persistence:
          $ref: "#/components/schemas/persistenceRequest"
    dataSetViewResponse:
      type: object
      properties:
        version:
          type: string
          description: The Semantic version of the DataSetView. Updated when the
            DataSetView is modified.
          readOnly: true
        imsOrg:
          type: string
          description: The owning IMS organization identifier.
        dataSetId:
          type: string
          description: Foreign key to the owning DataSet.
        aspect:
          type: string
          description: Aspect represents the particular perspective or target you're after
            when viewing a dataset. Sandbox views are a version of the dataset
            that's being used to iterate towards a final ETL job definition. The
            production aspect is then used (by default).
          enum:
            - production
            - sandbox
        observableSchema:
          type: object
          description: observableSchema stores a JSON Schema object that is a valid subset
            (including the null case) of the XDM model specified by `schema`.
        status:
          type: string
          description: Describes the current state of the view.  If a view is not enabled,
            it should not be used by any process even when it is specified as a
            dependency. Only one view of a given aspect should be enabled at any
            time. For example, no DataSet should have more than one enabled
            production or sandbox view.
          enum:
            - enabled
            - disabled
        requestStartDate:
          type: string
          description: The oldest date and the time, when the data was last ingested
        editable:
          type: boolean
          description: Determines whether or not this DataSetView definition should be
            editable by the user.  Some documents are 'locked' and not available
            for edit.
        dependencies:
          type: array
          description: An array of dependency objects. If a DataSetView is referenced in a
            transform, data about that linkage should be found in this array.
          items:
            $ref: "#/components/schemas/dependencies"
        sdsVersion:
          type: string
          description: The semantic version of the SDS this view (and it's transforms) are
            compatible with.
        fields:
          type: array
          description: Ordered array of fields describing the resulting schema (output) for
            this view.
          items:
            $ref: "#/components/schemas/field"
        storageType:
          type: string
          description: Specifies the type of storage that applies to basePath. It is
            required only when basePath is not empty.
          enum:
            - s3
            - hdfs
            - azure-blob
        basePath:
          type: string
          description: Fully qualified base path for all DataSetFiles associated with this
            view. For views cached in a database (HBase or Cassandra), supply a
            templatized DSN.
          readOnly: true
        persistence:
          $ref: "#/components/schemas/persistenceResponse"
        isCached:
          type: boolean
          description: Some DataSetViews are pre-cached in a high-speed lookup table for
            faster access, this flag indicates if that has been done.
        transforms:
          type: string
          description: Link to associated transforms in following string format
            /dataSets/{dataSetId}/views/{dataSetViewId}/transforms
        files:
          type: string
          description: Link to associated files in following string format
            /dataSets/{dataSetId}/views/{dataSetViewId}/files
        fileDescription:
          type: object
          description: Metadata describing the DataSetFiles associated with this
            DataSetView.
          properties:
            persisted:
              type: boolean
              description: Determines whether or not we are persisting the view to
                disk.  If this is false then the other fields in this object are
                redundant, but may be used for identifying old data that was
                persisted previously.
            containerFormat:
              type: string
              description: The Container format for all dataSetFiles associated with this
                view.
              enum:
                - text
                - sequence
                - parquet
            format:
              type: string
              description: The file format for all dataSetFiles associated with this view.
              enum:
                - ""
                - csv
                - text
                - parquet
                - json
                - sequencefile
            delimiters:
              type: array
              description: Characters used to separate fields.
              items:
                type: string
                maxLength: 1
            quotes:
              type: array
              description: ""
              items:
                type: string
            escapes:
              type: array
              description: ""
              items:
                type: string
            nullMarkers:
              type: array
              description: ""
              items:
                type: string
            header:
              type: boolean
              description: ""
            charset:
              type: string
              description: The character encoding of the files.
              enum:
                - US-ASCII
                - UTF-8
                - ISO-8859-1
                - ""
        partitions:
          type: array
          description: ""
          items:
            type: string
        saveStrategy:
          type: string
          description: Denotes save strategy for this dataset.
          enum:
            - append
            - overwrite
            - delta
        created:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) when this DataSetView was
            persisted.
          readOnly: true
        updated:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) for the time of last
            modification.
          readOnly: true
        createdClient:
          type: string
          description: The ID of the IMS client that created this DataSetView.
          readOnly: true
        createdUser:
          type: string
          description: The ID of the user who created this object.
          readOnly: true
        updatedUser:
          type: string
          description: The ID of the user who changed this object.
          readOnly: true
        createdXdmSchemaVersion:
          type: string
          description: The XDM version used when the dataSet was created using schemaRef.
        schema:
          type: string
          description: This is the uri for the XDM model
        schemaRef:
          $ref: "#/components/schemas/schemaRef"
    dataSetFileRequest:
      type: object
      properties:
        folderName:
          type: string
          description: The name of the folder as it resides in the basePath (provided from
            the DataSetView).
        batchId:
          type: string
          description: The ID of the Batch operation that created this DataSetFile.
        dataSetViewId:
          type: string
          description: The ID of the owning DataSetView.
        records:
          type: integer
          format: int64
          description: The number of records/rows/transactions contained in file
            represented by this DataSetFile.
        size:
          type: integer
          format: int64
          description: Size for the file in bytes.
        isValid:
          type: boolean
          description: True if the file can still be used. False if the file was part of a
            batch that was mistakenly uploaded or incorrect, and should no
            longer be considered.
        availableDates:
          $ref: "#/components/schemas/availableDates"
        sampleParent:
          type: array
          description: If this is a sample then this field contains the ID's of the
            DataSetFiles that it was generated from
          items:
            type: string
      required:
        - dataSetViewId
    dataSetFilePatchRequest:
      type: object
      properties:
        folderName:
          type: string
          description: The name of the folder as it resides in the basePath (provided from
            the DataSetView).
        batchId:
          type: string
          description: The ID of the Batch operation that created this DataSetFile.
        dataSetViewId:
          type: string
          description: The ID of the owning DataSetView.
        records:
          type: integer
          format: int64
          description: The number of records/rows/transactions contained in file
            represented by this DataSetFile.
        size:
          type: integer
          format: int64
          description: Size for the file in bytes.
        isValid:
          type: boolean
          description: True if the file can still be used. False if the file was part of a
            batch that was mistakenly uploaded or incorrect, and should no
            longer be considered.
        availableDates:
          $ref: "#/components/schemas/availableDates"
        sampleParent:
          type: array
          description: If this is a sample then this field contains the ID's of the
            DataSetFiles that it was generated from
          items:
            type: string
    dataSetFileResponse:
      type: object
      properties:
        version:
          type: string
          description: "The Semantic version of the DataSetFile. Updated when the
            DataSetFile is modified. Pattern: Pattern:
            ^[0-9]+\\.[0-9]+\\.[0-9]+((-[.0-9A-Za-z\\-\\+]+)|(\\+[.0-9A-Za-z\\-\
            \\+]+))*$"
        folderName:
          type: string
          description: The name of the folder as it resides in the basePath (provided from
            the DataSetView).
        batchId:
          type: string
          description: The ID of the Batch operation that created this DataSetFile.
        created:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) when this DataSetFile was
            persisted.
        updated:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) of last modification.
        imsOrg:
          type: string
          description: "The owning IMS organization identifier. Pattern:
            ^[0-9A-Za-z]@[Aa]dobe[Oo]rg$"
        dataSetViewId:
          type: string
          description: The ID of the owning DataSetView.
        createdClient:
          type: string
          description: The ID of the IMS client that created this Batch.
        createdUser:
          type: string
          description: The ID of the user who created this object.
        updatedUser:
          type: string
          description: The ID of the user who changed this object.
        records:
          type: integer
          format: int64
          description: The number of records/rows/transactions contained in file
            represented by this DataSetFile.
        size:
          type: integer
          format: int64
          description: Size for the file in bytes.
        isValid:
          type: boolean
          description: True if the file can still be used. False if the file was part of a
            batch that was mistakenly uploaded or incorrect, and should no
            longer be considered.
        availableDates:
          $ref: "#/components/schemas/availableDates"
        sampleParent:
          type: array
          description: If this is a sample then this field contains the ID's of the
            DataSetFiles that it was generated from
          items:
            type: string
    healthcheck:
      type: object
      properties:
        status:
          type: boolean
    health-detailed:
      type: object
      properties:
        status:
          type: boolean
        dependencies:
          type: array
          description: List of catalog dependencies and their health
          items:
            $ref: "#/components/schemas/health-dependencies"
    health-dependencies:
      type: object
      properties:
        service:
          type: string
        status:
          type: boolean
        duration:
          type: integer
    serviceResources:
      type: object
      properties:
        connector:
          type: string
        dataSource:
          type: string
        dataSet:
          type: string
        transform:
          type: string
    resourceItem:
      type: object
      properties:
        id:
          type: string
        method:
          type: string
        headers:
          type: object
          description: 'Example: "headers": {"if-match": "1.0.6"}'
        resource:
          type: string
        body:
          type: object
    duleLabelResponse:
      type: object
      description: Structure of the DULE label response that includes all labels associated
        with a given dataset.
      properties:
        connection:
          type: object
          description: If the dataset has a parent connection, the connection labels are
            returned.
        dataset:
          type: object
          description: The DULE labels on the dataset itself.
        fields:
          type: array
          description: The DULE labels on the individual fields.
          items:
            type: object
        schemaFields:
          type: array
          description: The DULE labels from the schemaMetadata.
          items:
            type: object
    transformRequest:
      type: object
      properties:
        inputs:
          type: array
          description: Input array for dataSetIds
          items:
            type: object
            description: dataset:@/dataSet/dataSetId
            properties:
              dataSet:
                type: string
        outputs:
          type: array
          description: Output array for dataSetIds
          items:
            type: object
            description: dataset:@/dataSet/dataSetId
            properties:
              dataSet:
                type: string
        name:
          type: string
          description: The human-readable name or title for this Transform.
        body:
          type: string
          description: Lines of script that make up the transformation/mapping logic for
            this Transform.
        language:
          type: string
          description: The type of language this transform's body contains.
          enum:
            - application/vnd.apache.spark-sql
        codeUrl:
          type: string
          description: If the body of this transform is not used, it is expected that a URL
            pointing to the location of the code to be used for this transform
            is placed in this field.
        vehicleUrl:
          type: string
          description: The URL of the vehicle that will orchestrate or otherwise run the
            code in this transform.
        args:
          type: array
          description: Contains all arguments that are required to actually run Transform
            entity.
          items:
            type: string
            description: An argument which is required to run transform entity.
            pattern: ^[.a-zA-Z0-9\-_$={} ]+$
    transformResponse:
      type: object
      properties:
        version:
          type: string
          description: The Semantic version of the Transform. Updated when the Transform is
            modified.
          readOnly: true
        imsOrg:
          type: string
          description: The owning IMS organization identifier.
        inputs:
          type: array
          description: Input array for dataSetIds
          items:
            type: object
            description: dataset:@/dataSet/dataSetId
            properties:
              dataSet:
                type: string
        outputs:
          type: array
          description: Output array for dataSetIds
          items:
            type: object
            description: dataset:@/dataSet/dataSetId
            properties:
              dataSet:
                type: string
        created:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) when this DataSetView was
            persisted.
          readOnly: true
        createdClient:
          type: string
          description: The ID of the IMS client that created this Batch.
          readOnly: true
        createdUser:
          type: string
          description: The ID of the user who created this object.
          readOnly: true
        updatedUser:
          type: string
          description: The ID of the user who changed this object.
          readOnly: true
        updated:
          type: integer
          format: int64
          description: The Unix timestamp (in milliseconds) for the time of last
            modification.
          readOnly: true
        name:
          type: string
          description: The human-readable name or title for this Transform.
        body:
          type: string
          description: Lines of script that make up the transformation/mapping logic for
            this Transform.
        language:
          type: string
          description: The type of language this transform's body contains.
          enum:
            - application/vnd.apache.spark-sql
        codeUrl:
          type: string
          description: If the body of this transform is not used, it is expected that a URL
            pointing to the location of the code to be used for this transform
            is placed in this field.
        vehicleUrl:
          type: string
          description: The URL of the vehicle that will orchestrate or otherwise run the
            code in this transform.
        args:
          type: array
          description: Contains all arguments that are required to actually run Transform
            entity.
          items:
            type: string
            description: An argument which is required to run transform entity.
            pattern: ^[.a-zA-Z0-9\-_$={} ]+$
    jsonSchemaBaseType:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        type:
          type: string
        meta:xdmType:
          type: string
      required:
        - type
        - meta:xdmType
      discriminator:
        propertyName: type
    jsonSchemaStringType:
      allOf:
        - $ref: "#/components/schemas/jsonSchemaBaseType"
        - properties:
            default:
              type: string
            enum:
              type: array
              items:
                type: string
            meta:enum:
              type: array
              items:
                type: string
            minLength:
              type: integer
            maxLength:
              type: integer
            pattern:
              type: string
            format:
              type: string
              enum:
                - date
                - date-time
                - email
                - hostname
                - ipv4
                - ipv6
                - uri
    jsonSchemaNumberType:
      allOf:
        - $ref: "#/components/schemas/jsonSchemaBaseType"
        - properties:
            minimum:
              type: number
            maximum:
              type: number
    jsonSchemaIntegerType:
      allOf:
        - $ref: "#/components/schemas/jsonSchemaBaseType"
        - properties:
            minimum:
              type: number
            maximum:
              type: number
    jsonSchemaBooleanType:
      allOf:
        - $ref: "#/components/schemas/jsonSchemaBaseType"
        - properties:
            default:
              type: boolean
    jsonSchemaNullType:
      allOf:
        - $ref: "#/components/schemas/jsonSchemaBaseType"
    jsonSchemaArrayType:
      allOf:
        - $ref: "#/components/schemas/jsonSchemaBaseType"
        - properties:
            items:
              type: object
              additionalProperties:
                {}
            $ref:
              type: string
    jsonSchemaObjectType:
      allOf:
        - $ref: "#/components/schemas/jsonSchemaBaseType"
        - properties:
            properties:
              type: object
              additionalProperties:
                {}
            additionalProperties:
              type: object
            $ref:
              type: string
    xdmSchema:
      type: object
      properties:
        title:
          type: string
          description: ""
        type:
          type: string
          description: ""
        description:
          type: string
          description: ""
        properties:
          type: object
          description: ""
          properties:
            {}
        version:
          type: string
          description: The Semantic version of the XDM object. Updated when the XDM is
            modified.
          readOnly: true
        created:
          type: integer
          description: The Unix timestamp (in milliseconds) when this XDM object was
            persisted.
          readOnly: true
        updated:
          type: integer
          description: The Unix timestamp (in milliseconds) for the time of last
            modification.
          readOnly: true
        createdClient:
          type: string
          description: The ID of the IMS client that created this XDM object.
          readOnly: true
        updatedUser:
          type: string
          description: The ID of the user who changed this object.
          readOnly: true
        imsOrg:
          type: string
          description: The owning IMS organization identifier.
        id:
          type: string
          description: ""
    xdmListAllSchema:
      type: array
      items:
        $ref: "#/components/schemas/xdmNamespacePaths"
    xdmNamespacePaths:
      type: object
      properties:
        namespace:
          type: string
          example: context
        type:
          type: string
          example: standard
        paths:
          type: array
          items:
            type: string
            example: "@/xdms/namespace/schemaname"
    xdmNamespaceDetail:
      type: object
      properties:
        schema 1:
          type: object
          properties:
            title:
              type: string
              description: ""
            type:
              type: string
              description: ""
            description:
              type: string
              description: ""
            properties:
              type: object
              description: ""
              properties:
                field1:
                  type: object
                  properties:
                    title:
                      type: string
                    type:
                      type: string
                    format:
                      type: string
                    default:
                      type: string
                    description:
                      type: string
                    meta:xdmType:
                      type: string
                field2:
                  type: object
                  properties:
                    title:
                      type: string
                    type:
                      type: string
                    format:
                      type: string
                    default:
                      type: string
                    description:
                      type: string
                    meta:xdmType:
                      type: string
            version:
              type: string
              description: The Semantic version of the XDM object. Updated when the XDM is
                modified.
              readOnly: true
            created:
              type: integer
              description: The Unix timestamp (in milliseconds) when this XDM object was
                persisted.
              readOnly: true
            updated:
              type: integer
              description: The Unix timestamp (in milliseconds) for the time of last
                modification.
              readOnly: true
            createdClient:
              type: string
              description: The ID of the IMS client that created this XDM object.
              readOnly: true
            updatedUser:
              type: string
              description: The ID of the user who changed this object.
              readOnly: true
            imsOrg:
              type: string
              description: The owning IMS organization identifier.
            id:
              type: string
              description: ""
        schema 2:
          type: object
          properties:
            title:
              type: string
              description: ""
            type:
              type: string
              description: ""
            description:
              type: string
              description: ""
            properties:
              type: object
              description: ""
              properties:
                field1:
                  type: object
                  properties:
                    title:
                      type: string
                    type:
                      type: string
                    format:
                      type: string
                    default:
                      type: string
                    description:
                      type: string
                    meta:xdmType:
                      type: string
                field2:
                  type: object
                  properties:
                    title:
                      type: string
                    type:
                      type: string
                    format:
                      type: string
                    default:
                      type: string
                    description:
                      type: string
                    meta:xdmType:
                      type: string
            version:
              type: string
              description: The Semantic version of the XDM object. Updated when the XDM is
                modified.
              readOnly: true
            created:
              type: integer
              description: The Unix timestamp (in milliseconds) when this XDM object was
                persisted.
              readOnly: true
            updated:
              type: integer
              description: The Unix timestamp (in milliseconds) for the time of last
                modification.
              readOnly: true
            createdClient:
              type: string
              description: The ID of the IMS client that created this XDM object.
              readOnly: true
            updatedUser:
              type: string
              description: The ID of the user who changed this object.
              readOnly: true
            imsOrg:
              type: string
              description: The owning IMS organization identifier.
            id:
              type: string
              description: ""
    subSchema:
      type: object
      properties:
        schema:
          type: object
          description: ""
          properties:
            {}
      required:
        - schema
    xdmExtensionResponse:
      type: object
      properties:
        title:
          type: string
          description: ""
        type:
          type: string
          description: ""
        description:
          type: string
          description: ""
        properties:
          description: A Map(String, JsonSchemaBaseType) representing the fields in this
            XDM extension.
          type: object
          properties:
            {}
        extNamespace:
          type: string
          description: ""
        version:
          type: string
          description: The version of the xdm extension. Updated when the xdm extension is
            modified.
          readOnly: true
        created:
          type: integer
          description: The Unix timestamp (in milliseconds) when this xdm extension was
            persisted.
          readOnly: true
        updated:
          type: integer
          description: The Unix timestamp (in milliseconds) for the time of last
            modification.
          readOnly: true
        createdClient:
          type: string
          description: The ID of the IMS client that created this xdm extension.
          readOnly: true
        updatedUser:
          type: string
          description: The ID of the user who changed this object.
          readOnly: true
        imsOrg:
          type: string
          description: The owning IMS organization identifier.
      required:
        - type
        - description
        - properties
    xdmExtensionRequest:
      type: object
      properties:
        title:
          type: string
          description: ""
        type:
          type: string
          description: ""
        description:
          type: string
          description: ""
        properties:
          description: A Map(String, JsonSchemaBaseType) representing the fields in this
            XDM extension.
          type: object
          properties:
            {}
      required:
        - type
        - description
        - properties
    xdmDescriptor:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - xdm:descriptorOneToOne
            - xdm:descriptorOneToMany
            - xdm:descriptorManyToMany
            - xdm:descriptorIdentity
            - xdm:descriptorPrimaryKey
            - xdm:descriptorInstantiable
            - xdm:updatePolicy
          example: string
        xdm:sourceSchema:
          type: string
          description: ""
        xdm:sourceProperty:
          type: string
          description: ""
        xdm:destSchema:
          type: string
          description: ""
        xdm:destProperty:
          type: string
          description: ""
        xdm:namespace:
          type: string
          description: ""
        xdm:property:
          type: string
          description: ""
        xdm:isPrimary:
          type: string
          description: ""
        xdm:updatePolicy:
          type: string
          enum:
            - xdm:updateMerge
            - xdm:updateReplace
            - xdm:updateTimeSeries
          example: string
          description: ""
      required:
        - "@type"
        - xdm:sourceSchema
    errors:
      type: object
      properties:
        code:
          type: string
          description: An enumerated code that details the type of error encountered. This
            value should be understandable by the reader and writer and
            eventually allow for localized error message (and solution)
            descriptions.
        rows:
          type: array
          description: Indicates which rows exhibit this error. Could be a single number,
            or a hyphen-delimited range.
          items:
            type: string
            description: Row or range of rows this error was encountered on.
        description:
          type: string
          description: A human-readable description of the error. This message may be
            transmitted to clients, but isn't meant for customer-facing UIS.
    relatedObjects:
      type: object
      properties:
        type:
          type: string
          description: The type of object processed in this Batch.
          enum:
            - batch
            - connection
            - connector
            - dataSet
            - dataSetFile
            - dataSetView
            - transform
        id:
          type: string
          description: ""
        tag:
          type: string
          description: "The name for the relation the specified object had with this Batch
            operation. Examples: input, output, trigger, etc."
        status:
          type: string
          description: The current (mutable) status of this dataset.
          enum:
            - processing
            - success
            - failure
            - queued
            - retrying
            - stalled
        errors:
          type: array
          description: ""
          items:
            $ref: "#/components/schemas/errors"
        metrics:
          type: object
          description: Contains metrics related to this dataset.
    contributors:
      type: object
      properties:
        contributor:
          type: string
          description: The friendly name of the process contributing data to a dataset
        type:
          type: string
          description: The enumerated category the process belongs to (if you don't
            think  your process matches one of these types please contact the
            team)
          enum:
            - connector
            - bulk-ingest
            - stream
    contacts:
      type: object
      properties:
        email:
          type: string
          format: email
        displayName:
          type: string
          description: Display name for this contact.
        isPrimary:
          type: boolean
          description: Indicates if this contact is (one of the) 'owners' or primary
            contacts for this connection.
    documents:
      type: object
      properties:
        name:
          type: string
          description: The display name for this reference document.
        type:
          type: string
          description: The format for this document.
          enum:
            - pdf
            - word
            - html
        link:
          type: string
          description: The full URI to this document.
    dependencies:
      type: object
      properties:
        dataSetId:
          type: string
          description: The ID of the dataset this view is dependent upon.
        dataSetViewId:
          type: string
          description: The ID of the view this view is dependent upon.
        type:
          type: string
          description: The type dependency. Activity for views that generate rows needed to
            be incorporated, and Lookup for views that provide metadata-like
            lookups/additional columns.
          enum:
            - lookup
            - activity
            - snapshot-lookup
            - snapshot-activity
    field:
      allOf:
        - $ref: "#/components/schemas/dataType"
        - type: object
          properties:
            name:
              type: string
              description: Field name.
            title:
              type: string
              description: Field title.
            description:
              type: string
              description: Field description.
            definition:
              type: object
              description: Deprecated - this field is currently a hack to support non-csv
                data.  We need to natively support this type of data
            meta:
              type: object
              description: Metadata descriptions for each field.
              properties:
                isPrimary:
                  type: boolean
                  description: Marks this field as a join key into other datasets.
                delta:
                  type: object
                  description: The presence of this attribute on a field indicates that it
                    is used in the origin system for retrieveing 'deltas' of
                    data
                  properties:
                    format:
                      type: string
                      description: If the origin field is a date field this describes the
                        format of that field in the style of Java
                        SimpleDateFormat
                    timezone:
                      type: string
                      description: The timezone that the data uses in the origin system,
                        uses the format from IANA in the tz_database
            dule:
              type: object
              description: DULE labels.
              properties:
                contracts:
                  description: What Contractual Considerations, if any, apply to this data?
                  type: array
                  items:
                    type: string
                    enum:
                      - C1
                      - C2
                      - C3
                      - C4
                      - C5
                      - C6
                      - C7
                      - C8
                      - C9
                      - None
                identifiability:
                  description: Should this data be treated as Indirectly Identifiable Data
                    or Directly Identifiable Data? (What is the level of
                    Identifiability?)
                  type: array
                  items:
                    type: string
                    enum:
                      - I1
                      - I2
                loginState:
                  description: What is the Log-in State?
                  type: array
                  items:
                    type: string
                    enum:
                      - Identified
                      - Incognito
                      - Ambiguous
                      - Not Provided
                specialTypes:
                  description: Is this a special data type? (Relative to a regulated
                    industry, or distinct regulatory rules, e.g. GDPR Special
                    data, health data, or Financial data)
                  type: array
                  items:
                    type: string
                    enum:
                      - S1
                      - S2
                other:
                  description: Other information that may govern the use of this data.
                  type: string
            gdpr:
              description: GDPR labels
              type: array
              items:
                type: object
                properties:
                  namespace:
                    type: string
                    description: The GDPR label for this column, indicating that this
                      column may contain information subject to GDPR rules
    schemaMetadata:
      type: object
      description: Metadata associated with observable schema.
      properties:
        identityNamespaces:
          description: Information about which portions of the schema and which identity
            namespaces they come from.
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                description: A JSON path expression pointing to the field that the
                  namespace is associated with.
              dataSourceId:
                type: string
                description: ID for the DataSource that models the identity space for this
                  identifier.
        aliases:
          description: The alternate names for fields.
          type: array
          items:
            type: object
            properties:
              namespace:
                type: string
                description: The name for the set of aliases this applies to.
              sourcePath:
                type: string
                description: JSON Path for the field being aliased.
              targetPath:
                type: string
                description: JSON Path of the field's alias.
        dule:
          type: array
          description: DULE labels.
          items:
            type: object
            properties:
              path:
                type: string
                description: A JSON path expression pointing to the field that the dule
                  labels are associated with.
              contracts:
                type: array
                description: What Contractual Considerations, if any, apply to this data?
                items:
                  enum:
                    - C1
                    - C2
                    - C3
                    - C4
                    - C5
                    - C6
                    - C7
                    - C8
                    - C9
                    - None
                  type: string
              identifiability:
                type: array
                description: Should this data be treated as Indirectly Identifiable Data or
                  Directly Identifiable Data? (What is the level of
                  Identifiability?)
                items:
                  enum:
                    - I1
                    - I2
                  type: string
              loginState:
                type: array
                description: What is the Log-in State?
                items:
                  enum:
                    - Identified
                    - Incognito
                    - Ambiguous
                    - Not Provided
                  type: string
              specialTypes:
                type: array
                description: Is this a special data type? (Relative to a regulated
                  industry, or distinct regulatory rules, e.g. GDPR Special
                  data, health data, or Financial data)
                items:
                  enum:
                    - S1
                    - S2
                  type: string
              other:
                type: string
                description: Other information that may govern the use of this data.
        gdpr:
          description: GDPR labels
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                description: A JSON path expression pointing to the field that contains the
                  GDPR label.
              namespace:
                type: array
                description: The array of GDPR labels for this column, indicating that this
                  column may contain information subject to GDPR rules
                items:
                  type: string
                  description: GDPR labels for this column, indicating that this column may
                    contain information subject to GDPR rules
        primaryKey:
          type: array
          description: Marks this field as a join key into other datasets.
          items:
            type: object
            properties:
              path:
                type: string
                description: A JSON path expression pointing to the field that is the key.
              isPrimary:
                type: boolean
                description: Marks this field as a join key into other datasets.
        delta:
          type: array
          description: The presence of this attribute on a field indicates that it is used
            in the origin system for retrieveing 'deltas' of data.
          items:
            type: object
            properties:
              path:
                type: string
                description: A JSON path expression pointing to the field that the delta is
                  associated with.
              format:
                type: string
                description: If the origin field is a date field this describes the format
                  of that field in the style of Java SimpleDateFormat.
              timezone:
                type: string
                description: The timezone that the data uses in the origin system, uses the
                  format from IANA in the tz_database.
        contentAttributes:
          type: array
          description: This attribute gives information the columns. For eg. if the field
            is hidden, temporarily empty etc.
          items:
            type: object
            properties:
              path:
                type: string
                description: A JSON path expression pointing to the field that the delta is
                  associated with.
              descriptor:
                type: string
                description: This field stores the information about the specific column
                  for eg.EMPTY_PERMANENT.
    credentials:
      type: object
      description: Credentials.
      properties:
        clientKey:
          type: string
          description: Credentials client key.
        clientId:
          type: string
          description: Credentials client ID.
        tenantId:
          type: string
          description: Credentials tenant ID.
        resourceGroupName:
          type: string
          description: Credentials resource group.
        subscriptionId:
          type: string
          description: Credentials subscription ID.
    dataSetCredentials:
      type: object
      properties:
        dataSetId:
          type: string
          description: The ID of the dataset these credentials are for.
        path:
          type: string
          description: Base storage path for this dataset.
        stagePath:
          type: string
          description: Staging base path for ingest.
        credentials:
          $ref: "#/components/schemas/credentials"
    dataType:
      type: object
      properties:
        type:
          type: string
          enum:
            - string
            - integer
            - long
            - double
            - boolean
            - date
            - byte
            - binary
            - float
            - number
            - array
            - object
            - map
        precision:
          description: required for type 'number'
          type: number
        scale:
          description: required for type 'number'
          type: number
        subType:
          $ref: "#/components/schemas/dataType"
        subFields:
          type: array
          items:
            $ref: "#/components/schemas/field"
        keyType:
          description: required for type 'map'
          type: string
          enum:
            - string
            - integer
            - long
            - double
            - boolean
            - date
            - byte
            - binary
            - float
        valueType:
          $ref: "#/components/schemas/dataType"
    schemaRef:
      type: object
      description: This is the full URL for XDM schema path. This field will be derived
        from schema field, if it is not present. This field will be used to
        annotate XDM schema version used in the dataSet or dataSetView.
      properties:
        id:
          type: string
          description: Id contains full URL path for XDM schema.
        contentType:
          type: string
          description: contentType rerpresents XDM schema version and type of schema.
    persistenceResponse:
      type: object
      description: Persistence object holds meta data of different persistence type
        supported by a dataset.
      properties:
        adls:
          type: object
          description: This object represents adls storage path for dataSets.
          readOnly: true
          properties:
            location:
              type: string
              description: Filter by the fully qualified base path for all DataSetFiles
                associated with this view. For views cached in a database (HBase
                or Cassandra), supply a templatized DSN. Its value is same as
                the basePath field.
            credentials:
              type: string
              description: This property represents the relative URI for persistence
                credentials of this dataset, for e.g.
                @/datasets/{id}/credentials.
        datastream:
          type: object
          description: This object represents stream persistence type for dataSets.
          properties:
            source:
              type: string
              description: This property represents the source of dataStream.
    persistenceRequest:
      type: object
      description: Persistence object holds meta data of different persistence type
        supported by a dataset.
      properties:
        datastream:
          type: object
          description: This object represents strean persistence type for dataSets
          properties:
            source:
              type: string
              description: This property represents the source of dataStream.
    tagsResponse:
      properties:
        objectType:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
            description: Array of relative path of collections with IDs, containing given
              namespace
        additionalProperties:
          type: array
          items:
            type: string
          description: Array of aggregated values for input tagNamespace
